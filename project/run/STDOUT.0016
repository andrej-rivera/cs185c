(PID.TID 0016.0001) 
(PID.TID 0016.0001) // ======================================================
(PID.TID 0016.0001) //                      MITgcm UV
(PID.TID 0016.0001) //                      =========
(PID.TID 0016.0001) // ======================================================
(PID.TID 0016.0001) // execution environment starting up...
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // MITgcmUV version:  checkpoint69d
(PID.TID 0016.0001) // Build user:        cs185c15
(PID.TID 0016.0001) // Build host:        spartan03.cluster
(PID.TID 0016.0001) // Build date:        Thu May  1 12:10:17 PDT 2025
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Execution Environment parameter file "eedata"
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) ># Example "eedata" file
(PID.TID 0016.0001) ># Lines beginning "#" are comments
(PID.TID 0016.0001) ># nTx - No. threads per process in X
(PID.TID 0016.0001) ># nTy - No. threads per process in Y
(PID.TID 0016.0001) > &EEPARMS
(PID.TID 0016.0001) > nTx=1,
(PID.TID 0016.0001) > nTy=1,
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) ># Note: Some systems use & as the
(PID.TID 0016.0001) ># namelist terminator. Other systems
(PID.TID 0016.0001) ># use a / character (as shown here).
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Computational Grid Specification ( see files "SIZE.h" )
(PID.TID 0016.0001) //                                  ( and "eedata"       )
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001)      nPx =    1 ; /* No. processes in X */
(PID.TID 0016.0001)      nPy =   17 ; /* No. processes in Y */
(PID.TID 0016.0001)      nSx =    1 ; /* No. tiles in X per process */
(PID.TID 0016.0001)      nSy =    1 ; /* No. tiles in Y per process */
(PID.TID 0016.0001)      sNx =  300 ; /* Tile size in X */
(PID.TID 0016.0001)      sNy =   12 ; /* Tile size in Y */
(PID.TID 0016.0001)      OLx =    4 ; /* Tile overlap distance in X */
(PID.TID 0016.0001)      OLy =    4 ; /* Tile overlap distance in Y */
(PID.TID 0016.0001)      nTx =    1 ; /* No. threads in X per process */
(PID.TID 0016.0001)      nTy =    1 ; /* No. threads in Y per process */
(PID.TID 0016.0001)       Nr =   50 ; /* No. levels in the vertical   */
(PID.TID 0016.0001)       Nx =  300 ; /* Total domain size in X ( = nPx*nSx*sNx ) */
(PID.TID 0016.0001)       Ny =  204 ; /* Total domain size in Y ( = nPy*nSy*sNy ) */
(PID.TID 0016.0001)   nTiles =    1 ; /* Total no. tiles per process ( = nSx*nSy ) */
(PID.TID 0016.0001)   nProcs =   17 ; /* Total no. processes ( = nPx*nPy ) */
(PID.TID 0016.0001) nThreads =    1 ; /* Total no. threads per process ( = nTx*nTy ) */
(PID.TID 0016.0001) usingMPI =    T ; /* Flag used to control whether MPI is in use */
(PID.TID 0016.0001)                   /*  note: To execute a program with MPI calls */
(PID.TID 0016.0001)                   /*  it must be launched appropriately e.g     */
(PID.TID 0016.0001)                   /*  "mpirun -np 64 ......"                    */
(PID.TID 0016.0001) useCoupler=   F ; /* Flag used to control communications with   */
(PID.TID 0016.0001)                   /*  other model components, through a coupler */
(PID.TID 0016.0001) useNest2W_parent =    F ;/* Control 2-W Nesting comm */
(PID.TID 0016.0001) useNest2W_child  =    F ;/* Control 2-W Nesting comm */
(PID.TID 0016.0001) debugMode =    F ; /* print debug msg. (sequence of S/R calls)  */
(PID.TID 0016.0001) printMapIncludesZeros=    F ; /* print zeros in Std.Output maps */
(PID.TID 0016.0001) maxLengthPrt1D=   65 /* maxLength of 1D array printed to StdOut */
(PID.TID 0016.0001) 
(PID.TID 0016.0001) ======= Starting MPI parallel Run =========
(PID.TID 0016.0001)  My Processor Name (len: 14 ) = node08.cluster
(PID.TID 0016.0001)  Located at (  0, 16) on processor grid (0:  0,0: 16)
(PID.TID 0016.0001)  Origin at  (     1,   193) on global grid (1:   300,1:   204)
(PID.TID 0016.0001)  North neighbor = processor 0000
(PID.TID 0016.0001)  South neighbor = processor 0015
(PID.TID 0016.0001)   East neighbor = processor 0016
(PID.TID 0016.0001)   West neighbor = processor 0016
(PID.TID 0016.0001) // ======================================================
(PID.TID 0016.0001) // Mapping of tiles to threads
(PID.TID 0016.0001) // ======================================================
(PID.TID 0016.0001) // -o- Thread   1, tiles (   1:   1,   1:   1)
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // ======================================================
(PID.TID 0016.0001) // Tile <-> Tile connectvity table
(PID.TID 0016.0001) // ======================================================
(PID.TID 0016.0001) // Tile number: 000017 (process no. = 000016)
(PID.TID 0016.0001) //        WEST: Tile = 000017, Process = 000016, Comm = put
(PID.TID 0016.0001) //                bi = 000001, bj = 000001
(PID.TID 0016.0001) //        EAST: Tile = 000017, Process = 000016, Comm = put
(PID.TID 0016.0001) //                bi = 000001, bj = 000001
(PID.TID 0016.0001) //       SOUTH: Tile = 000016, Process = 000015, Comm = messages
(PID.TID 0016.0001) //                bi = 000001, bj = 000001
(PID.TID 0016.0001) //       NORTH: Tile = 000001, Process = 000000, Comm = messages
(PID.TID 0016.0001) //                bi = 000001, bj = 000001
(PID.TID 0016.0001) 
(PID.TID 0016.0001)  INI_PARMS: opening model parameter file "data"
(PID.TID 0016.0001)  OPEN_COPY_DATA_FILE: opening file data
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Parameter file "data"
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) ># ====================
(PID.TID 0016.0001) ># | Model parameters |
(PID.TID 0016.0001) ># ====================
(PID.TID 0016.0001) >
(PID.TID 0016.0001) ># Continuous equation parameters
(PID.TID 0016.0001) > &PARM01
(PID.TID 0016.0001) > select_rStar=2,
(PID.TID 0016.0001) > nonlinFreeSurf=4,
(PID.TID 0016.0001) > implicitDiffusion=.TRUE.,
(PID.TID 0016.0001) > implicitViscosity=.TRUE.,
(PID.TID 0016.0001) > tempAdvScheme=7,
(PID.TID 0016.0001) > saltAdvScheme=7,
(PID.TID 0016.0001) > StaggerTimeStep=.TRUE.,
(PID.TID 0016.0001) > useSingleCPUio=.TRUE.,
(PID.TID 0016.0001) > exactConserv=.TRUE.,
(PID.TID 0016.0001) > useRealFreshWaterFlux=.TRUE.,
(PID.TID 0016.0001) > debugLevel=0,
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) >
(PID.TID 0016.0001) ># Elliptic solver parameters
(PID.TID 0016.0001) > &PARM02
(PID.TID 0016.0001) > cg2dMaxIters=300,
(PID.TID 0016.0001) > cg2dTargetResidual=1.E-10,
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) >
(PID.TID 0016.0001) ># Time stepping parameters
(PID.TID 0016.0001) > &PARM03
(PID.TID 0016.0001) > niter0=0,
(PID.TID 0016.0001) > deltaT=300.,
(PID.TID 0016.0001) > nTimeSteps = 105120,
(PID.TID 0016.0001) > pChkptFreq=2592000.,
(PID.TID 0016.0001) > dumpInitAndLast=.FALSE.,
(PID.TID 0016.0001) > writePickupAtEnd=.TRUE.,
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) >
(PID.TID 0016.0001) ># Gridding parameters
(PID.TID 0016.0001) > &PARM04
(PID.TID 0016.0001) > usingSphericalPolarGrid=.TRUE.,
(PID.TID 0016.0001) > delX=300*0.083333,
(PID.TID 0016.0001) > delY=204*0.083333,
(PID.TID 0016.0001) > xgOrigin=110,
(PID.TID 0016.0001) > ygOrigin=3,
(PID.TID 0016.0001) > delR = 10.00, 10.00, 10.00, 10.00, 10.00, 10.00, 10.00, 10.01,
(PID.TID 0016.0001) >        10.03, 10.11, 10.32, 10.80, 11.76, 13.42, 16.04, 19.82, 24.85,
(PID.TID 0016.0001) >        31.10, 38.42, 46.50, 55.00, 63.50, 71.58, 78.90, 85.15, 90.18,
(PID.TID 0016.0001) >        93.96, 96.58, 98.25, 99.25,100.01,101.33,104.56,111.33,122.83,
(PID.TID 0016.0001) >        139.09,158.94,180.83,203.55,226.50,249.50,272.50,295.50,318.50,
(PID.TID 0016.0001) >        341.50,364.50,387.50,410.50,433.50,456.50,
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) >
(PID.TID 0016.0001) ># Input datasets
(PID.TID 0016.0001) > &PARM05
(PID.TID 0016.0001) > bathyFile = 'CA_bathymetry.bin',
(PID.TID 0016.0001) > hydrogThetaFile = 'THETA_IC.bin',
(PID.TID 0016.0001) > hydrogSaltFile = 'SALT_IC.bin',
(PID.TID 0016.0001) > uVelInitFile = 'UVEL_IC.bin',
(PID.TID 0016.0001) > vVelInitFile = 'VVEL_IC.bin',
(PID.TID 0016.0001) > pSurfInitFile = 'ETAN_IC.bin',
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) 
(PID.TID 0016.0001)  INI_PARMS ; starts to read PARM01
(PID.TID 0016.0001)  INI_PARMS ; read PARM01 : OK
(PID.TID 0016.0001) S/R INI_PARMS: No request for barotropic solver
(PID.TID 0016.0001) S/R INI_PARMS: => Use implicitFreeSurface as default
(PID.TID 0016.0001)  INI_PARMS ; starts to read PARM02
(PID.TID 0016.0001)  INI_PARMS ; read PARM02 : OK
(PID.TID 0016.0001)  INI_PARMS ; starts to read PARM03
(PID.TID 0016.0001)  INI_PARMS ; read PARM03 : OK
(PID.TID 0016.0001)  INI_PARMS ; starts to read PARM04
(PID.TID 0016.0001)  INI_PARMS ; read PARM04 : OK
(PID.TID 0016.0001)  INI_PARMS ; starts to read PARM05
(PID.TID 0016.0001)  INI_PARMS ; read PARM05 : OK
(PID.TID 0016.0001)  INI_PARMS: finished reading file "data"
(PID.TID 0016.0001)  PACKAGES_BOOT: opening data.pkg
(PID.TID 0016.0001)  OPEN_COPY_DATA_FILE: opening file data.pkg
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Parameter file "data.pkg"
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) ># Packages
(PID.TID 0016.0001) > &PACKAGES
(PID.TID 0016.0001) > useCAL         = .TRUE.,
(PID.TID 0016.0001) > useEXF         = .TRUE.,
(PID.TID 0016.0001) > useOBCS        = .TRUE.,
(PID.TID 0016.0001) > useKPP         = .TRUE.,
(PID.TID 0016.0001) > useDIAGNOSTICS = .TRUE.,
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) 
(PID.TID 0016.0001)  PACKAGES_BOOT: finished reading data.pkg
(PID.TID 0016.0001)  PACKAGES_BOOT: On/Off package Summary
 --------  pkgs with a standard "usePKG" On/Off switch in "data.pkg":  --------
 pkg/obcs                 compiled   and   used ( useOBCS                  = T )
 pkg/kpp                  compiled   and   used ( useKPP                   = T )
 pkg/cal                  compiled   and   used ( useCAL                   = T )
 pkg/exf                  compiled   and   used ( useEXF                   = T )
 pkg/diagnostics          compiled   and   used ( useDiagnostics           = T )
 -------- pkgs without standard "usePKG" On/Off switch in "data.pkg":  --------
 pkg/generic_advdiff      compiled   and   used ( useGAD                   = T )
 pkg/mom_common           compiled   and   used ( momStepping              = T )
 pkg/mom_vecinv           compiled but not used ( +vectorInvariantMomentum = F )
 pkg/mom_fluxform         compiled   and   used ( & not vectorInvariantMom = T )
 pkg/monitor              compiled   and   used ( monitorFreq > 0.         = T )
 pkg/debug                compiled but not used ( debugMode                = F )
 pkg/rw                   compiled   and   used
 pkg/mdsio                compiled   and   used
(PID.TID 0016.0001)  PACKAGES_BOOT: End of package Summary
(PID.TID 0016.0001) 
(PID.TID 0016.0001) CAL_READPARMS: opening data.cal
(PID.TID 0016.0001)  OPEN_COPY_DATA_FILE: opening file data.cal
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Parameter file "data.cal"
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) ># *******************
(PID.TID 0016.0001) ># Calendar Parameters
(PID.TID 0016.0001) ># *******************
(PID.TID 0016.0001) > &CAL_NML
(PID.TID 0016.0001) > TheCalendar='gregorian',
(PID.TID 0016.0001) > startDate_1=19970116,
(PID.TID 0016.0001) > startDate_2=000000,
(PID.TID 0016.0001) > calendarDumps = .TRUE.,
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) 
(PID.TID 0016.0001) CAL_READPARMS: finished reading data.cal
(PID.TID 0016.0001) EXF_READPARMS: opening data.exf
(PID.TID 0016.0001)  OPEN_COPY_DATA_FILE: opening file data.exf
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Parameter file "data.exf"
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) ># *********************
(PID.TID 0016.0001) ># External Forcing Data
(PID.TID 0016.0001) ># *********************
(PID.TID 0016.0001) >
(PID.TID 0016.0001) > &EXF_NML_01
(PID.TID 0016.0001) > exf_albedo        = 0.1,
(PID.TID 0016.0001) ># useExfZenIncoming = .TRUE.,
(PID.TID 0016.0001) ># select_ZenAlbedo  = 1,
(PID.TID 0016.0001) > useExfYearlyFields= .TRUE.,
(PID.TID 0016.0001) > useExfCheckRange  = .FALSE.,
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) >
(PID.TID 0016.0001) > &EXF_NML_02
(PID.TID 0016.0001) > uwindfile       = 'exf/UWIND_zero',
(PID.TID 0016.0001) > vwindfile       = 'exf/VWIND_zero',
(PID.TID 0016.0001) > atempfile         = 'exf/ATEMP',
(PID.TID 0016.0001) > aqhfile           = 'exf/AQH',
(PID.TID 0016.0001) > precipfile        = 'exf/PRECIP',
(PID.TID 0016.0001) > swdownfile        = 'exf/SWDOWN',
(PID.TID 0016.0001) > lwdownfile        = 'exf/LWDOWN',
(PID.TID 0016.0001) ># runofffile        = 'exf/RUNOFF',
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > atempstartdate1   = 20080101,
(PID.TID 0016.0001) > atempstartdate2   = 030000,
(PID.TID 0016.0001) > atempperiod       = 21600.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > aqhstartdate1     = 20080101,
(PID.TID 0016.0001) > aqhstartdate2     = 030000,
(PID.TID 0016.0001) > aqhperiod         = 21600.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > precipstartdate1  = 20080101,
(PID.TID 0016.0001) > precipstartdate2  = 030000,
(PID.TID 0016.0001) > precipperiod      = 21600.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) ># runoffstartdate1  = 20080101,
(PID.TID 0016.0001) ># runoffstartdate2  = 030000,
(PID.TID 0016.0001) ># runoffperiod      = 21600.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > uwindstartdate1   = 20080101,
(PID.TID 0016.0001) > uwindstartdate2   = 030000,
(PID.TID 0016.0001) > uwindperiod       = 21600.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > vwindstartdate1   = 20080101,
(PID.TID 0016.0001) > vwindstartdate2   = 030000,
(PID.TID 0016.0001) > vwindperiod       = 21600.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > swdownstartdate1  = 20080101,
(PID.TID 0016.0001) > swdownstartdate2  = 030000,
(PID.TID 0016.0001) > swdownperiod      = 21600.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > lwdownstartdate1  = 20080101,
(PID.TID 0016.0001) > lwdownstartdate2  = 030000,
(PID.TID 0016.0001) > lwdownperiod      = 21600.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) >
(PID.TID 0016.0001) >
(PID.TID 0016.0001) > &EXF_NML_03
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) >
(PID.TID 0016.0001) > &EXF_NML_04
(PID.TID 0016.0001) > runoff_interpMethod = 0,
(PID.TID 0016.0001) > uwind_interpMethod = 0,
(PID.TID 0016.0001) > vwind_interpMethod = 0,
(PID.TID 0016.0001) > atemp_interpMethod = 0,
(PID.TID 0016.0001) > aqh_interpMethod = 0,
(PID.TID 0016.0001) > precip_interpMethod = 0,
(PID.TID 0016.0001) > swdown_interpMethod = 0,
(PID.TID 0016.0001) > lwdown_interpMethod = 0,
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) >
(PID.TID 0016.0001) >
(PID.TID 0016.0001) > &EXF_NML_OBCS
(PID.TID 0016.0001) > obcsEstartdate1     = 19920101,
(PID.TID 0016.0001) > obcsEstartdate2     = 120000,
(PID.TID 0016.0001) > obcsEperiod         = 2592000.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > obcsSstartdate1     = 19920101,
(PID.TID 0016.0001) > obcsSstartdate2     = 120000,
(PID.TID 0016.0001) > obcsSperiod         = 2592000.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > obcsNstartdate1     = 19920101,
(PID.TID 0016.0001) > obcsNstartdate2     = 120000,
(PID.TID 0016.0001) > obcsNperiod         = 2592000.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > obcsWstartdate1     = 19920101,
(PID.TID 0016.0001) > obcsWstartdate2     = 120000,
(PID.TID 0016.0001) > obcsWperiod         = 2592000.0,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > useOBCSYearlyFields = .TRUE.,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) 
(PID.TID 0016.0001) EXF_READPARMS: reading EXF_NML_01
(PID.TID 0016.0001) EXF_READPARMS: reading EXF_NML_02
(PID.TID 0016.0001) EXF_READPARMS: reading EXF_NML_03
(PID.TID 0016.0001) EXF_READPARMS: reading EXF_NML_OBCS
(PID.TID 0016.0001) EXF_READPARMS: finished reading data.exf
(PID.TID 0016.0001)  OBCS_READPARMS: opening data.obcs
(PID.TID 0016.0001)  OPEN_COPY_DATA_FILE: opening file data.obcs
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Parameter file "data.obcs"
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) ># Open-boundaries
(PID.TID 0016.0001) > &OBCS_PARM01
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > OBCSfixTopo=.FALSE.,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > OB_Jsouth= 300*1,
(PID.TID 0016.0001) > OB_Iwest = 204*1,
(PID.TID 0016.0001) > OB_Jnorth= 300*204,
(PID.TID 0016.0001) > OB_Ieast = 204*300,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > useOBCSsponge = .TRUE.,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > useOBCSbalance = .TRUE.,
(PID.TID 0016.0001) > OBCSbalanceSurf = .TRUE.,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > useOBCSprescribe = .TRUE.,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) ># identify files (uncomment as needed)
(PID.TID 0016.0001) > OBEuFile = 'obcs/UVEL_east',
(PID.TID 0016.0001) > OBSuFile = 'obcs/UVEL_south',
(PID.TID 0016.0001) > OBWuFile = 'obcs/UVEL_west',
(PID.TID 0016.0001) > OBNuFile = 'obcs/UVEL_north',
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > OBEvFile = 'obcs/VVEL_east',
(PID.TID 0016.0001) > OBSvFile = 'obcs/VVEL_south',
(PID.TID 0016.0001) > OBWvFile = 'obcs/VVEL_west',
(PID.TID 0016.0001) > OBNvFile = 'obcs/VVEL_north',
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > OBEtFile = 'obcs/THETA_east',
(PID.TID 0016.0001) > OBStFile = 'obcs/THETA_south',
(PID.TID 0016.0001) > OBWtFile = 'obcs/THETA_west',
(PID.TID 0016.0001) > OBNtFile = 'obcs/THETA_north',
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > OBEsFile = 'obcs/SALT_east',
(PID.TID 0016.0001) > OBSsFile = 'obcs/SALT_south',
(PID.TID 0016.0001) > OBWsFile = 'obcs/SALT_west',
(PID.TID 0016.0001) > OBNsFile = 'obcs/SALT_north',
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) >
(PID.TID 0016.0001) > &OBCS_PARM02
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) >
(PID.TID 0016.0001) > &OBCS_PARM03
(PID.TID 0016.0001) > spongeThickness = 10,
(PID.TID 0016.0001) > Urelaxobcsinner = 1296000.E0,
(PID.TID 0016.0001) > Vrelaxobcsinner = 1296000.E0,
(PID.TID 0016.0001) > Urelaxobcsbound=43200.E0,
(PID.TID 0016.0001) > Vrelaxobcsbound=43200.E0,
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) 
(PID.TID 0016.0001)  OBCS_READPARMS: finished reading data.obcs
(PID.TID 0016.0001)  KPP_READPARMS: opening data.kpp
(PID.TID 0016.0001)  OPEN_COPY_DATA_FILE: opening file data.kpp
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Parameter file "data.kpp"
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) ># KPP parameters
(PID.TID 0016.0001) > &KPP_PARM01
(PID.TID 0016.0001) > KPPmixingMaps   = .FALSE.,
(PID.TID 0016.0001) > KPPwriteState   = .FALSE.,
(PID.TID 0016.0001) > kpp_dumpFreq    = 0.,
(PID.TID 0016.0001) > kpp_tavefreq    = 0.,
(PID.TID 0016.0001) > Ricr            = 0.3583,
(PID.TID 0016.0001) > Riinfty         = 0.6998,
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) 
(PID.TID 0016.0001)  KPP_READPARMS ; starts to read KPP_PARM01
(PID.TID 0016.0001)  KPP_READPARMS ; read KPP_PARM01 : OK
(PID.TID 0016.0001)  KPP_READPARMS: finished reading data.kpp
(PID.TID 0016.0001)  DIAGNOSTICS_READPARMS: opening data.diagnostics
(PID.TID 0016.0001)  OPEN_COPY_DATA_FILE: opening file data.diagnostics
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Parameter file "data.diagnostics"
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) ># Diagnostic Package Choices
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > &diagnostics_list
(PID.TID 0016.0001) >     dumpAtLast = .TRUE.,
(PID.TID 0016.0001) >#--
(PID.TID 0016.0001) ># Example of a 2d field output in daily snapshots
(PID.TID 0016.0001) >#--
(PID.TID 0016.0001) >  fields(1,1) = 'ETAN    ',
(PID.TID 0016.0001) >  fileName(1) = 'diags/EtaN_day_snap/EtaN_day_snap',
(PID.TID 0016.0001) >  frequency(1) =  -86400.,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) >#--
(PID.TID 0016.0001) ># Example of a 2d field output in monthly means
(PID.TID 0016.0001) >#--
(PID.TID 0016.0001) >  fields(1,2) = 'ETAN    ',
(PID.TID 0016.0001) >  fileName(2) = 'diags/EtaN_mon_mean/EtaN_mon_mean',
(PID.TID 0016.0001) >  frequency(2) =  2592000.,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) >#--
(PID.TID 0016.0001) ># Example of 3d fields output in monthly shapshots
(PID.TID 0016.0001) >#--
(PID.TID 0016.0001) >  fields(1:2,3) = 'UVEL    ','VVEL    ',
(PID.TID 0016.0001) >  fileName(3) = 'diags/vel_3D_mon_snap/vel_3D_mon_snap',
(PID.TID 0016.0001) >  frequency(3) = -2592000.,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) >#--
(PID.TID 0016.0001) >#--
(PID.TID 0016.0001) ># Example of 3d fields output in monthly means
(PID.TID 0016.0001) >#--
(PID.TID 0016.0001) >  fields(1:2,4) = 'THETA   ','SALT    ',
(PID.TID 0016.0001) >  fileName(4) = 'diags/TS_3D_mon_mean/TS_3D_mon_mean',
(PID.TID 0016.0001) >  frequency(4) = 2592000.,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) >#--
(PID.TID 0016.0001) ># Example of 3d fields output as means at the surface only
(PID.TID 0016.0001) >#--
(PID.TID 0016.0001) >  fields(1:2,5) = 'THETA   ','SALT    ',
(PID.TID 0016.0001) >  fileName(5) = 'diags/TS_surf_daily_mean/TS_surf_daily_mean',
(PID.TID 0016.0001) >  frequency(5) = 86400.,
(PID.TID 0016.0001) >  levels(:,5) = 1,
(PID.TID 0016.0001) >#
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) >
(PID.TID 0016.0001) ># Parameter for Diagnostics of per level statistics:
(PID.TID 0016.0001) > &DIAG_STATIS_PARMS
(PID.TID 0016.0001) > /
(PID.TID 0016.0001) 
(PID.TID 0016.0001) S/R DIAGNOSTICS_READPARMS, read namelist "diagnostics_list": start
(PID.TID 0016.0001) S/R DIAGNOSTICS_READPARMS, read namelist "diagnostics_list": OK
(PID.TID 0016.0001) S/R DIAGNOSTICS_READPARMS, read namelist "DIAG_STATIS_PARMS": start
(PID.TID 0016.0001) S/R DIAGNOSTICS_READPARMS, read namelist "DIAG_STATIS_PARMS": OK
(PID.TID 0016.0001) -----------------------------------------------------
(PID.TID 0016.0001)  DIAGNOSTICS_READPARMS: global parameter summary:
(PID.TID 0016.0001)  diag_dBugLevel = /* level of printed debug messages */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  dumpAtLast = /* always write time-ave diags at the end */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  diag_mnc =   /* write NetCDF output files */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  useMissingValue = /* put MissingValue where mask = 0 */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  diagCG_maxIters = /* max number of iters in diag_cg2d */
(PID.TID 0016.0001)                     300
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  diagCG_resTarget = /* residual target for diag_cg2d */
(PID.TID 0016.0001)                 1.000000000000000E-10
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  diagCG_pcOffDFac = /* preconditioner off-diagonal factor */
(PID.TID 0016.0001)                 9.611687812379854E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) -----------------------------------------------------
(PID.TID 0016.0001)  DIAGNOSTICS_READPARMS: active diagnostics summary:
(PID.TID 0016.0001) -----------------------------------------------------
(PID.TID 0016.0001) Creating Output Stream: diags/EtaN_day_snap/EtaN_day_snap
(PID.TID 0016.0001) Output Frequency:     -86400.000000 ; Phase:       43200.000000
(PID.TID 0016.0001)  Averaging Freq.:          0.000000 , Phase:           0.000000 , Cycle:   1
(PID.TID 0016.0001)  missing value: -9.990000000000E+02
(PID.TID 0016.0001)  Levels:    will be set later
(PID.TID 0016.0001)  Fields:    ETAN
(PID.TID 0016.0001) Creating Output Stream: diags/EtaN_mon_mean/EtaN_mon_mean
(PID.TID 0016.0001) Output Frequency:    2592000.000000 ; Phase:           0.000000
(PID.TID 0016.0001)  Averaging Freq.:    2592000.000000 , Phase:           0.000000 , Cycle:   1
(PID.TID 0016.0001)  missing value: -9.990000000000E+02
(PID.TID 0016.0001)  Levels:    will be set later
(PID.TID 0016.0001)  Fields:    ETAN
(PID.TID 0016.0001) Creating Output Stream: diags/vel_3D_mon_snap/vel_3D_mon_snap
(PID.TID 0016.0001) Output Frequency:   -2592000.000000 ; Phase:     1296000.000000
(PID.TID 0016.0001)  Averaging Freq.:          0.000000 , Phase:           0.000000 , Cycle:   1
(PID.TID 0016.0001)  missing value: -9.990000000000E+02
(PID.TID 0016.0001)  Levels:    will be set later
(PID.TID 0016.0001)  Fields:    UVEL     VVEL
(PID.TID 0016.0001) Creating Output Stream: diags/TS_3D_mon_mean/TS_3D_mon_mean
(PID.TID 0016.0001) Output Frequency:    2592000.000000 ; Phase:           0.000000
(PID.TID 0016.0001)  Averaging Freq.:    2592000.000000 , Phase:           0.000000 , Cycle:   1
(PID.TID 0016.0001)  missing value: -9.990000000000E+02
(PID.TID 0016.0001)  Levels:    will be set later
(PID.TID 0016.0001)  Fields:    THETA    SALT
(PID.TID 0016.0001) Creating Output Stream: diags/TS_surf_daily_mean/TS_surf_daily_mean
(PID.TID 0016.0001) Output Frequency:      86400.000000 ; Phase:           0.000000
(PID.TID 0016.0001)  Averaging Freq.:      86400.000000 , Phase:           0.000000 , Cycle:   1
(PID.TID 0016.0001)  missing value: -9.990000000000E+02
(PID.TID 0016.0001)  Levels:       1.
(PID.TID 0016.0001)  Fields:    THETA    SALT
(PID.TID 0016.0001) -----------------------------------------------------
(PID.TID 0016.0001)  DIAGNOSTICS_READPARMS: statistics diags. summary:
(PID.TID 0016.0001) -----------------------------------------------------
(PID.TID 0016.0001) 
(PID.TID 0016.0001) SET_PARMS: done
(PID.TID 0016.0001) Enter INI_VERTICAL_GRID: setInterFDr=    T ; setCenterDr=    F
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Calendar configuration >>> START <<<
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) 
(PID.TID 0016.0001) modelstart = /* Start time of the model integration [s] */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) modelend  = /* End time of the model integration [s] */
(PID.TID 0016.0001)                 3.153600000000000E+07
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) modelStep = /* Time interval for a model forward step [s] */
(PID.TID 0016.0001)                 3.000000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) usingGregorianCalendar= /* Calendar Type: Gregorian Calendar */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) usingJulianCalendar = /* Calendar Type: Julian Calendar */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) usingNoLeapYearCal  = /* Calendar Type: without Leap Year */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) usingModelCalendar  = /* Calendar Type: Model Calendar */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) modelStartDate YYYYMMDD = /* Model start date YYYY-MM-DD */
(PID.TID 0016.0001)                19970116
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)   modelStartDate HHMMSS = /* Model start date HH-MM-SS  */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) modelEndDate   YYYYMMDD = /* Model end date YYYY-MM-DD */
(PID.TID 0016.0001)                19980116
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)   modelEndDate   HHMMSS = /* Model end date HH-MM-SS  */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) intyears = /* Number of calendar years affected by the integration */
(PID.TID 0016.0001)                       2
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) intmonths= /* Number of calendar months affected by the integration */
(PID.TID 0016.0001)                      13
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) intdays = /* Number of calendar days affected by the integration */
(PID.TID 0016.0001)                     365
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) modelIter0 = /* Base timestep number  */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) modelIterEnd = /* Final timestep number  */
(PID.TID 0016.0001)                  105120
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) modelIntSteps= /* Number of model timesteps  */
(PID.TID 0016.0001)                  105120
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Calendar configuration  >>> END <<<
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) 
(PID.TID 0016.0001) GAD_INIT_FIXED: GAD_OlMinSize=  4  0  1
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // ===================================
(PID.TID 0016.0001) // GAD parameters :
(PID.TID 0016.0001) // ===================================
(PID.TID 0016.0001) tempAdvScheme =   /* Temp. Horiz.Advection scheme selector */
(PID.TID 0016.0001)                       7
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tempVertAdvScheme =   /* Temp. Vert. Advection scheme selector */
(PID.TID 0016.0001)                       7
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tempMultiDimAdvec =   /* use Muti-Dim Advec method for Temp */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tempSOM_Advection = /* use 2nd Order Moment Advection for Temp */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) AdamsBashforthGt = /* apply Adams-Bashforth extrapolation on Gt */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) AdamsBashforth_T = /* apply Adams-Bashforth extrapolation on Temp */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) saltAdvScheme =   /* Salt. Horiz.advection scheme selector */
(PID.TID 0016.0001)                       7
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) saltVertAdvScheme =   /* Salt. Vert. Advection scheme selector */
(PID.TID 0016.0001)                       7
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) saltMultiDimAdvec =   /* use Muti-Dim Advec method for Salt */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) saltSOM_Advection = /* use 2nd Order Moment Advection for Salt */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) AdamsBashforthGs = /* apply Adams-Bashforth extrapolation on Gs */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) AdamsBashforth_S = /* apply Adams-Bashforth extrapolation on Salt */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) // ===================================
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // External forcing (EXF) configuration >>> START <<<
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) 
(PID.TID 0016.0001)  EXF general parameters:
(PID.TID 0016.0001) 
(PID.TID 0016.0001) exf_iprec = /* exf file precision */
(PID.TID 0016.0001)                      32
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useExfYearlyFields = /* add extension _YEAR to input file names */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) twoDigitYear = /* use 2-digit year extension */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useExfCheckRange = /* check for fields range */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) diags_opOceWeighted = /* weight flux diags by open-ocean fraction */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) exf_debugLev = /* select EXF-debug printing level */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) exf_monFreq  = /* EXF monitor frequency [ s ] */
(PID.TID 0016.0001)                 3.000000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) exf_adjMonSelect = /* select group of exf AD-variables to monitor */
(PID.TID 0016.0001)                       1
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) repeatPeriod = /* period for cycling forcing dataset [ s ] */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) climTempFreeze= /* Minimum climatological temperature [deg.C] */
(PID.TID 0016.0001)                -1.900000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) windStressMax = /* Maximum absolute windstress [ Pa ] */
(PID.TID 0016.0001)                 2.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) stressIsOnCgrid = /* set u,v_stress on Arakawa C-grid */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rotateStressOnAgrid = /* rotate u,v_stress on Arakawa A-grid */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cen2kel = /* conversion of deg. Centigrade to Kelvin [K] */
(PID.TID 0016.0001)                 2.731500000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) gravity_mks= /* gravitational acceleration [m/s^2] */
(PID.TID 0016.0001)                 9.810000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) atmrho =  /* mean atmospheric density [kg/m^3] */
(PID.TID 0016.0001)                 1.200000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) atmcp =  /* mean atmospheric specific heat [J/kg/K] */
(PID.TID 0016.0001)                 1.005000000000000E+03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) flamb =  /* latent heat of evaporation [J/kg] */
(PID.TID 0016.0001)                 2.500000000000000E+06
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) flami =  /* latent heat of pure-ice melting [J/kg] */
(PID.TID 0016.0001)                 3.340000000000000E+05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cvapor_fac = /* const. for Saturation calculation [?] */
(PID.TID 0016.0001)                 6.403800000000000E+05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cvapor_exp = /* const. for Saturation calculation [?] */
(PID.TID 0016.0001)                 5.107400000000000E+03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cvapor_fac_ice= /* const. for Saturation calculation [?] */
(PID.TID 0016.0001)                 1.163780000000000E+07
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cvapor_exp_ice= /* const. for Saturation calculation [?] */
(PID.TID 0016.0001)                 5.897800000000000E+03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) humid_fac = /* humidity coef. in virtual temp. [(kg/kg)^-1] */
(PID.TID 0016.0001)                 6.060000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) gamma_blk = /* adiabatic lapse rate [?] */
(PID.TID 0016.0001)                 1.000000000000000E-02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) saltsat = /* reduction of Qsat over salty water [-] */
(PID.TID 0016.0001)                 9.800000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) noNegativeEvap = /* prevent negative Evaporation */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) sstExtrapol = /* extrapolation coeff from lev. 1 & 2 to surf [-] */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cDrag_1 = /* coef used in drag calculation [m/s] */
(PID.TID 0016.0001)                 2.700000000000000E-03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cDrag_2 = /* coef used in drag calculation [-] */
(PID.TID 0016.0001)                 1.420000000000000E-04
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cDrag_3 = /* coef used in drag calculation [s/m] */
(PID.TID 0016.0001)                 7.640000000000000E-05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cDrag_8 = /* coef used in drag calculation [(s/m)^6] */
(PID.TID 0016.0001)                 1.234567000000000E+05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cDragMax = /* maximum drag (Large and Yeager, 2009) [-] */
(PID.TID 0016.0001)                 1.234567000000000E+05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) umax = /* at maximum wind (Large and Yeager, 2009) [m/s] */
(PID.TID 0016.0001)                 1.234567000000000E+05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cStanton_1 = /* coef used in Stanton number calculation [-] */
(PID.TID 0016.0001)                 3.270000000000000E-02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cStanton_2 = /* coef used in Stanton number calculation [-] */
(PID.TID 0016.0001)                 1.800000000000000E-02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cDalton = /* Dalton number [-] */
(PID.TID 0016.0001)                 3.460000000000000E-02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) exf_scal_BulkCdn= /* Drag coefficient scaling factor [-] */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) zolmin = /* minimum stability parameter [?] */
(PID.TID 0016.0001)                -1.000000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) psim_fac = /* coef used in turbulent fluxes calculation [-] */
(PID.TID 0016.0001)                 5.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) zref =  /* reference height [ m ] */
(PID.TID 0016.0001)                 1.000000000000000E+01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) hu =  /* height of mean wind [ m ] */
(PID.TID 0016.0001)                 1.000000000000000E+01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) ht =  /* height of mean temperature [ m ] */
(PID.TID 0016.0001)                 2.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) hq =  /* height of mean spec.humidity [ m ] */
(PID.TID 0016.0001)                 2.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) uMin = /* minimum wind speed [m/s] */
(PID.TID 0016.0001)                 5.000000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useStabilityFct_overIce= /* transfert Coeffs over sea-ice depend on stability */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) exf_iceCd = /* drag coefficient over sea-ice (fixed) [-] */
(PID.TID 0016.0001)                 1.630000000000000E-03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) exf_iceCe = /* transfert coeff. over sea-ice, for Evap (fixed) [-] */
(PID.TID 0016.0001)                 1.630000000000000E-03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) exf_iceCh = /* transfert coeff. over sea-ice, Sens.Heat.(fixed)[-] */
(PID.TID 0016.0001)                 1.630000000000000E-03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) exf_albedo =  /* Sea-water albedo [-] */
(PID.TID 0016.0001)                 1.000000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useExfZenAlbedo = /* Sea-water albedo varies with zenith angle */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) select_ZenAlbedo = /* Sea-water albedo computation method */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useExfZenIncoming = /* compute incoming solar radiation */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) ocean_emissivity = /* longwave ocean-surface emissivity [-] */
(PID.TID 0016.0001)                 9.700176366843034E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) ice_emissivity = /* longwave seaice emissivity [-] */
(PID.TID 0016.0001)                 9.500000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) snow_emissivity = /* longwave snow  emissivity [-] */
(PID.TID 0016.0001)                 9.500000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) 
(PID.TID 0016.0001)  EXF main CPP flags:
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // USE_EXF_INTERPOLATION:          NOT defined
(PID.TID 0016.0001) // ALLOW_ATM_TEMP:                     defined
(PID.TID 0016.0001) // ALLOW_ATM_WIND (useAtmWind):        defined
(PID.TID 0016.0001) // ALLOW_DOWNWARD_RADIATION:           defined
(PID.TID 0016.0001) // ALLOW_BULKFORMULAE:                 defined
(PID.TID 0016.0001) 
(PID.TID 0016.0001)    Zonal wind forcing starts at                      10800.
(PID.TID 0016.0001)    Zonal wind forcing period is                      21600.
(PID.TID 0016.0001)    Zonal wind forcing repeat-cycle is                    0.
(PID.TID 0016.0001)    Zonal wind forcing is read from file:
(PID.TID 0016.0001)    >> exf/UWIND_zero <<
(PID.TID 0016.0001) 
(PID.TID 0016.0001)    Meridional wind forcing starts at                 10800.
(PID.TID 0016.0001)    Meridional wind forcing period is                 21600.
(PID.TID 0016.0001)    Meridional wind forcing repeat-cycle is               0.
(PID.TID 0016.0001)    Meridional wind forcing is read from file:
(PID.TID 0016.0001)    >> exf/VWIND_zero <<
(PID.TID 0016.0001) 
(PID.TID 0016.0001)    Atmospheric temperature starts at                 10800.
(PID.TID 0016.0001)    Atmospheric temperature period is                 21600.
(PID.TID 0016.0001)    Atmospheric temperature repeat-cycle is               0.
(PID.TID 0016.0001)    Atmospheric temperature is read from file:
(PID.TID 0016.0001)    >> exf/ATEMP <<
(PID.TID 0016.0001) 
(PID.TID 0016.0001)    Atmospheric specific humidity starts at           10800.
(PID.TID 0016.0001)    Atmospheric specific humidity period is           21600.
(PID.TID 0016.0001)    Atmospheric specific humidity rep-cycle is            0.
(PID.TID 0016.0001)    Atmospheric specific humidity is read from file:
(PID.TID 0016.0001)    >> exf/AQH <<
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // ALLOW_READ_TURBFLUXES:          NOT defined
(PID.TID 0016.0001) // EXF_READ_EVAP:                  NOT defined
(PID.TID 0016.0001) 
(PID.TID 0016.0001)    Precipitation data starts at                      10800.
(PID.TID 0016.0001)    Precipitation data period is                      21600.
(PID.TID 0016.0001)    Precipitation data repeat-cycle is                    0.
(PID.TID 0016.0001)    Precipitation data is read from file:
(PID.TID 0016.0001)    >> exf/PRECIP <<
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // ALLOW_RUNOFF:                       defined
(PID.TID 0016.0001) // ALLOW_RUNOFTEMP:                NOT defined
(PID.TID 0016.0001) // ALLOW_SALTFLX:                      defined
(PID.TID 0016.0001) 
(PID.TID 0016.0001)    Downward shortwave flux starts at                 10800.
(PID.TID 0016.0001)    Downward shortwave flux period is                 21600.
(PID.TID 0016.0001)    Downward shortwave flux repeat-cycle is               0.
(PID.TID 0016.0001)    Downward shortwave flux is read from file:
(PID.TID 0016.0001)    >> exf/SWDOWN <<
(PID.TID 0016.0001) 
(PID.TID 0016.0001)    Downward longwave flux starts at                  10800.
(PID.TID 0016.0001)    Downward longwave flux period is                  21600.
(PID.TID 0016.0001)    Downward longwave flux repeat-cycle is                0.
(PID.TID 0016.0001)    Downward longwave flux is read from file:
(PID.TID 0016.0001)    >> exf/LWDOWN <<
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // External forcing (EXF) climatology configuration :
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // ALLOW_CLIMSST_RELAXATION:           defined
(PID.TID 0016.0001)    climsst relaxation is NOT used
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // ALLOW_CLIMSSS_RELAXATION:           defined
(PID.TID 0016.0001)    climsss relaxation is NOT used
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // External forcing (EXF) configuration  >>> END <<<
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) 
(PID.TID 0016.0001) ------------------------------------------------------------
(PID.TID 0016.0001) DIAGNOSTICS_SET_LEVELS: done
(PID.TID 0016.0001)  Total Nb of available Diagnostics: ndiagt=   240
(PID.TID 0016.0001) SETDIAG: Allocate  1 x  1 Levels for Diagnostic #    23 ETAN
(PID.TID 0016.0001) SETDIAG: Allocate  1 x  1 Levels for Diagnostic #    23 ETAN
(PID.TID 0016.0001) SETDIAG: Allocate 50 x  1 Levels for Diagnostic #    30 UVEL
(PID.TID 0016.0001) SETDIAG: Allocate 50 x  1 Levels for Diagnostic #    31 VVEL
(PID.TID 0016.0001) SETDIAG: Allocate 50 x  1 Levels for Diagnostic #    26 THETA
(PID.TID 0016.0001) SETDIAG: Allocate 50 x  1 Levels for Diagnostic #    27 SALT
(PID.TID 0016.0001) SETDIAG: Allocate 50 x  1 Levels for Diagnostic #    26 THETA
(PID.TID 0016.0001) SETDIAG: Allocate 50 x  1 Levels for Diagnostic #    27 SALT
(PID.TID 0016.0001)   space allocated for all diagnostics:     302 levels
(PID.TID 0016.0001)   set mate pointer for diag #    30  UVEL     , Parms: UUR     MR , mate:    31
(PID.TID 0016.0001)   set mate pointer for diag #    31  VVEL     , Parms: VVR     MR , mate:    30
(PID.TID 0016.0001) DIAGNOSTICS_SET_POINTERS: Set levels for Outp.Stream: diags/EtaN_day_snap/EtaN_day_snap
(PID.TID 0016.0001)  Levels:       1.
(PID.TID 0016.0001) DIAGNOSTICS_SET_POINTERS: Set levels for Outp.Stream: diags/EtaN_mon_mean/EtaN_mon_mean
(PID.TID 0016.0001)  Levels:       1.
(PID.TID 0016.0001) DIAGNOSTICS_SET_POINTERS: Set levels for Outp.Stream: diags/vel_3D_mon_snap/vel_3D_mon_snap
(PID.TID 0016.0001)  Levels:       1.   2.   3.   4.   5.   6.   7.   8.   9.  10.  11.  12.  13.  14.  15.  16.  17.  18.  19.  20.
(PID.TID 0016.0001)  Levels:      21.  22.  23.  24.  25.  26.  27.  28.  29.  30.  31.  32.  33.  34.  35.  36.  37.  38.  39.  40.
(PID.TID 0016.0001)  Levels:      41.  42.  43.  44.  45.  46.  47.  48.  49.  50.
(PID.TID 0016.0001) DIAGNOSTICS_SET_POINTERS: Set levels for Outp.Stream: diags/TS_3D_mon_mean/TS_3D_mon_mean
(PID.TID 0016.0001)  Levels:       1.   2.   3.   4.   5.   6.   7.   8.   9.  10.  11.  12.  13.  14.  15.  16.  17.  18.  19.  20.
(PID.TID 0016.0001)  Levels:      21.  22.  23.  24.  25.  26.  27.  28.  29.  30.  31.  32.  33.  34.  35.  36.  37.  38.  39.  40.
(PID.TID 0016.0001)  Levels:      41.  42.  43.  44.  45.  46.  47.  48.  49.  50.
(PID.TID 0016.0001) DIAGNOSTICS_SET_POINTERS: done, use     302 levels (numDiags =     500 )
(PID.TID 0016.0001) ------------------------------------------------------------
(PID.TID 0016.0001) DIAGSTATS_SET_REGIONS: define no region
(PID.TID 0016.0001) ------------------------------------------------------------
(PID.TID 0016.0001)   space allocated for all stats-diags:       0 levels
(PID.TID 0016.0001) DIAGSTATS_SET_POINTERS: done, use       0 levels (diagSt_size=     500 )
(PID.TID 0016.0001) ------------------------------------------------------------
(PID.TID 0016.0001) INI_CG2D: CG2D normalisation factor =  1.5330295160315060E-04
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Model configuration
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) //
(PID.TID 0016.0001) // "Physical" paramters ( PARM01 in namelist )
(PID.TID 0016.0001) //
(PID.TID 0016.0001) buoyancyRelation = /* Type of relation to get Buoyancy */
(PID.TID 0016.0001)               'OCEANIC'
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) fluidIsAir   =  /* fluid major constituent is Air */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) fluidIsWater =  /* fluid major constituent is Water */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) usingPCoords =  /* use p (or p*) vertical coordinate */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) usingZCoords =  /* use z (or z*) vertical coordinate */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tRef =   /* Reference temperature profile ( oC or K ) */
(PID.TID 0016.0001)    50 @  2.000000000000000E+01              /* K =  1: 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) sRef =   /* Reference salinity profile ( g/kg ) */
(PID.TID 0016.0001)    50 @  3.000000000000000E+01              /* K =  1: 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rhoRef =   /* Density vertical profile from (Ref,sRef)( kg/m^3 ) */
(PID.TID 0016.0001)    50 @  9.998000000000000E+02              /* K =  1: 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dBdrRef = /* Vertical grad. of reference buoyancy [(m/s/r)^2] */
(PID.TID 0016.0001)    50 @  0.000000000000000E+00              /* K =  1: 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useStrainTensionVisc= /* Use StrainTension Form of Viscous Operator */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useVariableVisc = /* Use variable horizontal viscosity */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useHarmonicVisc = /* Use harmonic horizontal viscosity */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useBiharmonicVisc= /* Use biharmonic horiz.  viscosity */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useSmag3D = /* Use isotropic 3-D Smagorinsky viscosity */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) viscAh  =   /* Lateral harmonic viscosity ( m^2/s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) viscA4  =   /* Lateral biharmonic viscosity ( m^4/s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) no_slip_sides =  /* Viscous BCs: No-slip sides */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) sideDragFactor = /* side-drag scaling factor (non-dim) */
(PID.TID 0016.0001)                 2.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) viscArNr = /* vertical profile of vertical viscosity ( m^2/s )*/
(PID.TID 0016.0001)    50 @  0.000000000000000E+00              /* K =  1: 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) no_slip_bottom =  /* Viscous BCs: No-slip bottom */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) bottomVisc_pCell = /* Partial-cell in bottom Visc. BC */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) bottomDragLinear = /* linear bottom-drag coefficient ( m/s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) bottomDragQuadratic = /* quadratic bottom-drag coefficient (-) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) selectBotDragQuadr = /* select quadratic bottom drag options */
(PID.TID 0016.0001)                      -1
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) diffKhT =   /* Laplacian diffusion of heat laterally ( m^2/s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) diffK4T =   /* Biharmonic diffusion of heat laterally ( m^4/s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) diffKhS =   /* Laplacian diffusion of salt laterally ( m^2/s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) diffK4S =   /* Biharmonic diffusion of salt laterally ( m^4/s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) diffKrNrT = /* vertical profile of vertical diffusion of Temp ( m^2/s )*/
(PID.TID 0016.0001)    50 @  0.000000000000000E+00              /* K =  1: 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) diffKrNrS = /* vertical profile of vertical diffusion of Salt ( m^2/s )*/
(PID.TID 0016.0001)    50 @  0.000000000000000E+00              /* K =  1: 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) diffKrBL79surf = /* Surface diffusion for Bryan and Lewis 79 ( m^2/s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) diffKrBL79deep = /* Deep diffusion for Bryan and Lewis 1979 ( m^2/s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) diffKrBL79scl = /* Depth scale for Bryan and Lewis 1979 ( m ) */
(PID.TID 0016.0001)                 2.000000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) diffKrBL79Ho = /* Turning depth for Bryan and Lewis 1979 ( m ) */
(PID.TID 0016.0001)                -2.000000000000000E+03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) ivdc_kappa = /* Implicit Vertical Diffusivity for Convection ( m^2/s) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) hMixCriteria=  /* Criteria for mixed-layer diagnostic */
(PID.TID 0016.0001)                -8.000000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dRhoSmall =  /* Parameter for mixed-layer diagnostic */
(PID.TID 0016.0001)                 1.000000000000000E-06
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) hMixSmooth=  /* Smoothing parameter for mixed-layer diagnostic */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) eosType =  /* Type of Equation of State */
(PID.TID 0016.0001)               'LINEAR'
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tAlpha = /* Linear EOS thermal expansion coefficient ( 1/oC ) */
(PID.TID 0016.0001)                 2.000000000000000E-04
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) sBeta  = /* Linear EOS haline contraction coefficient ( 1/(g/kg) ) */
(PID.TID 0016.0001)                 7.400000000000000E-04
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rhoNil    = /* Reference density for Linear EOS ( kg/m^3 ) */
(PID.TID 0016.0001)                 9.998000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) selectP_inEOS_Zc = /* select pressure to use in EOS (0,1,2,3) */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     0= -g*rhoConst*z ; 1= pRef (from tRef,sRef); 2= Hyd P ; 3= Hyd+NH P
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) surf_pRef = /* Surface reference pressure ( Pa ) */
(PID.TID 0016.0001)                 1.013250000000000E+05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) HeatCapacity_Cp =  /* Specific heat capacity ( J/kg/K ) */
(PID.TID 0016.0001)                 3.994000000000000E+03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) celsius2K = /* 0 degree Celsius converted to Kelvin ( K ) */
(PID.TID 0016.0001)                 2.731500000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rhoConst  = /* Reference density (Boussinesq)  ( kg/m^3 ) */
(PID.TID 0016.0001)                 9.998000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rhoFacC = /* normalized Reference density @ cell-Center (-) */
(PID.TID 0016.0001)    50 @  1.000000000000000E+00              /* K =  1: 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rhoFacF = /* normalized Reference density @ W-Interface (-) */
(PID.TID 0016.0001)    51 @  1.000000000000000E+00              /* K =  1: 51 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rhoConstFresh = /* Fresh-water reference density ( kg/m^3 ) */
(PID.TID 0016.0001)                 9.998000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) gravity =   /* Gravitational acceleration ( m/s^2 ) */
(PID.TID 0016.0001)                 9.810000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) gBaro =   /* Barotropic gravity ( m/s^2 ) */
(PID.TID 0016.0001)                 9.810000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) gravFacC = /* gravity factor (vs surf.) @ cell-Center (-) */
(PID.TID 0016.0001)    50 @  1.000000000000000E+00              /* K =  1: 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) gravFacF = /* gravity factor (vs surf.) @ W-Interface (-) */
(PID.TID 0016.0001)    51 @  1.000000000000000E+00              /* K =  1: 51 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rotationPeriod =   /* Rotation Period ( s ) */
(PID.TID 0016.0001)                 8.616400000000000E+04
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) omega =   /* Angular velocity ( rad/s ) */
(PID.TID 0016.0001)                 7.292123516990375E-05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) f0 =   /* Reference coriolis parameter ( 1/s ) */
(PID.TID 0016.0001)                 1.000000000000000E-04
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) beta =   /* Beta ( 1/(m.s) ) */
(PID.TID 0016.0001)                 9.999999999999999E-12
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) fPrime =   /* Second coriolis parameter ( 1/s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rigidLid =   /* Rigid lid on/off flag */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) implicitFreeSurface =   /* Implicit free surface on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) freeSurfFac =   /* Implicit free surface factor */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) implicSurfPress =  /* Surface Pressure implicit factor (0-1) */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) implicDiv2DFlow =  /* Barot. Flow Div. implicit factor (0-1) */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) uniformLin_PhiSurf = /* use uniform Bo_surf on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) uniformFreeSurfLev = /* free-surface level-index is uniform */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) sIceLoadFac =  /* scale factor for sIceLoad (0-1) */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) hFacMin =   /* minimum partial cell factor (hFac) */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) hFacMinDr = /* minimum partial cell thickness ( m) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) exactConserv =  /* Exact Volume Conservation on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) linFSConserveTr = /* Tracer correction for Lin Free Surface on/off flag */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) nonlinFreeSurf = /* Non-linear Free Surf. options (-1,0,1,2,3)*/
(PID.TID 0016.0001)                       4
(PID.TID 0016.0001)      -1,0= Off ; 1,2,3= On, 2=+rescale gU,gV, 3=+update cg2d solv.
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) hFacInf =   /* lower threshold for hFac (nonlinFreeSurf only)*/
(PID.TID 0016.0001)                 2.000000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) hFacSup =   /* upper threshold for hFac (nonlinFreeSurf only)*/
(PID.TID 0016.0001)                 2.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) select_rStar = /* r* Vertical coord. options (=0 r coord.; >0 uses r*)*/
(PID.TID 0016.0001)                       2
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useRealFreshWaterFlux = /* Real Fresh Water Flux on/off flag*/
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) temp_EvPrRn = /* Temp. of Evap/Prec/R (UNSET=use local T)(oC)*/
(PID.TID 0016.0001)                 1.234567000000000E+05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) salt_EvPrRn = /* Salin. of Evap/Prec/R (UNSET=use local S)(g/kg)*/
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) selectAddFluid = /* option for mass source/sink of fluid (=0: off) */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) temp_addMass = /* Temp. of addMass array (UNSET=use local T)(oC)*/
(PID.TID 0016.0001)                 1.234567000000000E+05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) salt_addMass = /* Salin. of addMass array (UNSET=use local S)(g/kg)*/
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) use3Dsolver = /* use 3-D pressure solver on/off flag */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) nonHydrostatic =  /* Non-Hydrostatic on/off flag */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) nh_Am2 = /* Non-Hydrostatic terms scaling factor */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) implicitNHPress = /* Non-Hyd Pressure implicit factor (0-1)*/
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) selectNHfreeSurf = /* Non-Hyd (free-)Surface option */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) quasiHydrostatic = /* Quasi-Hydrostatic on/off flag */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) calc_wVelocity = /* vertical velocity calculation on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) momStepping =  /* Momentum equation on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) vectorInvariantMomentum= /* Vector-Invariant Momentum on/off */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) momAdvection =  /* Momentum advection on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) momViscosity =  /* Momentum viscosity on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) momImplVertAdv= /* Momentum implicit vert. advection on/off*/
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) implicitViscosity = /* Implicit viscosity on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) selectImplicitDrag= /* Implicit bot Drag options (0,1,2)*/
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     0= Expl. ; 1= Impl. on provis. Vel ; 2= Fully Impl (with surf.P)
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) selectMetricTerms= /* Metric-Terms on/off flag (=0/1) */
(PID.TID 0016.0001)                       1
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useNHMTerms = /* Non-Hydrostatic Metric-Terms on/off */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) selectCoriMap = /* Coriolis Map options (0,1,2,3)*/
(PID.TID 0016.0001)                       2
(PID.TID 0016.0001)     0= f-Plane ; 1= Beta-Plane ; 2= Spherical ; 3= read from file
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) select3dCoriScheme= /* 3-D Coriolis on/off flag (=0/1) */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useCoriolis =  /* Coriolis on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useCDscheme =  /* CD scheme on/off flag */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) selectCoriScheme= /* Scheme selector for Coriolis-Term */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)    = 0 : original discretization (simple averaging, no hFac)
(PID.TID 0016.0001)    = 1 : Wet-point averaging (Jamar & Ozer 1986)
(PID.TID 0016.0001)    = 2 : energy conserving scheme (no hFac weight)
(PID.TID 0016.0001)    = 3 : energy conserving scheme using Wet-point averaging
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) momForcing =  /* Momentum forcing on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) momTidalForcing = /* Momentum Tidal forcing on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) momPressureForcing =  /* Momentum pressure term on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) implicitIntGravWave= /* Implicit Internal Gravity Wave flag */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) staggerTimeStep =    /* Stagger time stepping on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) doResetHFactors = /* reset thickness factors @ each time-step */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) multiDimAdvection =  /* enable/disable Multi-Dim Advection */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useMultiDimAdvec =   /* Multi-Dim Advection is/is-not used */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) implicitDiffusion = /* Implicit Diffusion on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tempStepping =  /* Temperature equation on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tempAdvection = /* Temperature advection on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tempImplVertAdv = /* Temp. implicit vert. advection on/off */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tempForcing  =  /* Temperature forcing on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) doThetaClimRelax = /* apply SST relaxation on/off flag */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tempIsActiveTr = /* Temp. is a dynamically Active Tracer */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) saltStepping =  /* Salinity equation on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) saltAdvection = /* Salinity advection on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) saltImplVertAdv = /* Sali. implicit vert. advection on/off */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) saltForcing  =  /* Salinity forcing on/off flag */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) doSaltClimRelax = /* apply SSS relaxation on/off flag */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) saltIsActiveTr = /* Salt  is a dynamically Active Tracer */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  readBinaryPrec = /* Precision used for reading binary files */
(PID.TID 0016.0001)                      32
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) writeBinaryPrec = /* Precision used for writing binary files */
(PID.TID 0016.0001)                      32
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  rwSuffixType =   /* select format of mds file suffix */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)    = 0 : myIter (I10.10) ;   = 1 : 100*myTime (100th sec) ;
(PID.TID 0016.0001)    = 2 : myTime (seconds);   = 3 : myTime/360 (10th of hr);
(PID.TID 0016.0001)    = 4 : myTime/3600 (hours)
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  globalFiles = /* write "global" (=not per tile) files */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  useSingleCpuIO = /* only master MPI process does I/O */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  useSingleCpuInput = /* only master process reads input */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) /* debLev[*]  : level of debug & auxiliary message printing */
(PID.TID 0016.0001) debLevZero =  0 ; /* level of disabled aux. msg printing */
(PID.TID 0016.0001)    debLevA =  1 ; /* level of minimum  aux. msg printing */
(PID.TID 0016.0001)    debLevB =  2 ; /* level of low aux. print (report read-file opening)*/
(PID.TID 0016.0001)    debLevC =  3 ; /* level of moderate debug prt (most pkgs debug msg) */
(PID.TID 0016.0001)    debLevD =  4 ; /* level of enhanced debug prt (add DEBUG_STATS prt) */
(PID.TID 0016.0001)    debLevE =  5 ; /* level of extensive debug printing */
(PID.TID 0016.0001) debugLevel =  /* select debug printing level */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  plotLevel =  /* select PLOT_FIELD printing level */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) //
(PID.TID 0016.0001) // Elliptic solver(s) paramters ( PARM02 in namelist )
(PID.TID 0016.0001) //
(PID.TID 0016.0001) cg2dMaxIters =   /* Upper limit on 2d con. grad iterations  */
(PID.TID 0016.0001)                     300
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cg2dMinItersNSA =   /* Minimum number of iterations of 2d con. grad solver  */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cg2dUseMinResSol= /* use cg2d last-iter(=0) / min-resid.(=1) solution */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cg2dTargetResidual =   /* 2d con. grad target residual  */
(PID.TID 0016.0001)                 1.000000000000000E-10
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cg2dTargetResWunit =   /* CG2d target residual [W units] */
(PID.TID 0016.0001)                -1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cg2dPreCondFreq =   /* Freq. for updating cg2d preconditioner */
(PID.TID 0016.0001)                       1
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useSRCGSolver =  /* use single reduction CG solver(s) */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useNSACGSolver =  /* use not-self-adjoint CG solver */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) printResidualFreq = /* Freq. for printing CG residual */
(PID.TID 0016.0001)                      -1
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) //
(PID.TID 0016.0001) // Time stepping paramters ( PARM03 in namelist )
(PID.TID 0016.0001) //
(PID.TID 0016.0001) deltaTMom =   /* Momentum equation timestep ( s ) */
(PID.TID 0016.0001)                 3.000000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) deltaTFreeSurf = /* FreeSurface equation timestep ( s ) */
(PID.TID 0016.0001)                 3.000000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dTtracerLev =  /* Tracer equation timestep ( s ) */
(PID.TID 0016.0001)    50 @  3.000000000000000E+02              /* K =  1: 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) deltaTClock  =   /* Model clock timestep ( s ) */
(PID.TID 0016.0001)                 3.000000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) cAdjFreq =   /* Convective adjustment interval ( s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) momForcingOutAB = /* =1: take Momentum Forcing out of Adams-Bash. stepping */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tracForcingOutAB = /* =1: take T,S,pTr Forcing out of Adams-Bash. stepping */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) momDissip_In_AB = /* put Dissipation Tendency in Adams-Bash. stepping */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) doAB_onGtGs = /* apply AB on Tendencies (rather than on T,S)*/
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) abEps =   /* Adams-Bashforth-2 stabilizing weight */
(PID.TID 0016.0001)                 1.000000000000000E-02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) applyExchUV_early = /* Apply EXCH to U,V earlier in time-step */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) pickupStrictlyMatch= /* stop if pickup do not strictly match */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) nIter0   =   /* Run starting timestep number */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) nTimeSteps = /* Number of timesteps */
(PID.TID 0016.0001)                  105120
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) nEndIter =   /* Run ending timestep number */
(PID.TID 0016.0001)                  105120
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) baseTime =   /* Model base time ( s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) startTime =  /* Run start time ( s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) endTime  =   /* Integration ending time ( s ) */
(PID.TID 0016.0001)                 3.153600000000000E+07
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) pChkPtFreq = /* Permanent restart/pickup file interval ( s ) */
(PID.TID 0016.0001)                 2.592000000000000E+06
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) chkPtFreq  = /* Rolling restart/pickup file interval ( s ) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) pickup_write_mdsio =   /* Model IO flag. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) pickup_read_mdsio =   /* Model IO flag. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) writePickupAtEnd =   /* Model IO flag. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dumpFreq =   /* Model state write out interval ( s ). */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dumpInitAndLast= /* write out Initial & Last iter. model state */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) snapshot_mdsio =   /* Model IO flag. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) monitorFreq =   /* Monitor output interval ( s ). */
(PID.TID 0016.0001)                 3.000000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) monitorSelect = /* select group of variables to monitor */
(PID.TID 0016.0001)                       3
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) monitor_stdio =   /* Model IO flag. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) externForcingPeriod =   /* forcing period (s) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) externForcingCycle =   /* period of the cyle (s). */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tauThetaClimRelax =   /* relaxation time scale (s) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) tauSaltClimRelax =   /* relaxation time scale (s) */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) latBandClimRelax =   /* max. Lat. where relaxation */
(PID.TID 0016.0001)                 1.800000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) //
(PID.TID 0016.0001) // Gridding paramters ( PARM04 in namelist )
(PID.TID 0016.0001) //
(PID.TID 0016.0001) usingCartesianGrid = /* Cartesian coordinates flag ( True/False ) */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) usingCylindricalGrid = /* Cylindrical coordinates flag ( True/False ) */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) usingSphericalPolarGrid = /* Spherical coordinates flag ( True/False ) */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) usingCurvilinearGrid = /* Curvilinear coordinates flag ( True/False ) */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useMin4hFacEdges = /* set hFacW,S as minimum of adjacent hFacC factor */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) interViscAr_pCell = /* account for partial-cell in interior vert. viscosity */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) interDiffKr_pCell = /* account for partial-cell in interior vert. diffusion */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) pCellMix_select = /* option to enhance mixing near surface & bottom */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) selectSigmaCoord = /* Hybrid-Sigma Vert. Coordinate option */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rSigmaBnd = /* r/sigma transition ( units of r ==  m ) */
(PID.TID 0016.0001)                 1.234567000000000E+05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rkSign =   /* index orientation relative to vertical coordinate */
(PID.TID 0016.0001)                -1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) gravitySign = /* gravity orientation relative to vertical coordinate */
(PID.TID 0016.0001)                -1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) seaLev_Z =  /* reference height of sea-level [m] */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) top_Pres =  /* reference pressure at the top [Pa] */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) mass2rUnit = /* convert mass per unit area [kg/m2] to r-units [m] */
(PID.TID 0016.0001)                 1.000200040008002E-03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rUnit2mass = /* convert r-units [m] to mass per unit area [kg/m2] */
(PID.TID 0016.0001)                 9.998000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) drC =   /* C spacing ( units of r ) */
(PID.TID 0016.0001)                 5.000000000000000E+00,      /* K =  1 */
(PID.TID 0016.0001)     6 @  1.000000000000000E+01,             /* K =  2:  7 */
(PID.TID 0016.0001)                 1.000500000000000E+01,      /* K =  8 */
(PID.TID 0016.0001)                 1.002000000000000E+01,      /* K =  9 */
(PID.TID 0016.0001)                 1.007000000000000E+01,      /* K = 10 */
(PID.TID 0016.0001)                 1.021500000000000E+01,      /* K = 11 */
(PID.TID 0016.0001)                 1.056000000000000E+01,      /* K = 12 */
(PID.TID 0016.0001)                 1.128000000000000E+01,      /* K = 13 */
(PID.TID 0016.0001)                 1.259000000000000E+01,      /* K = 14 */
(PID.TID 0016.0001)                 1.473000000000000E+01,      /* K = 15 */
(PID.TID 0016.0001)                 1.793000000000000E+01,      /* K = 16 */
(PID.TID 0016.0001)                 2.233500000000000E+01,      /* K = 17 */
(PID.TID 0016.0001)                 2.797500000000000E+01,      /* K = 18 */
(PID.TID 0016.0001)                 3.476000000000001E+01,      /* K = 19 */
(PID.TID 0016.0001)                 4.246000000000000E+01,      /* K = 20 */
(PID.TID 0016.0001)                 5.075000000000000E+01,      /* K = 21 */
(PID.TID 0016.0001)                 5.925000000000000E+01,      /* K = 22 */
(PID.TID 0016.0001)                 6.753999999999999E+01,      /* K = 23 */
(PID.TID 0016.0001)                 7.524000000000001E+01,      /* K = 24 */
(PID.TID 0016.0001)                 8.202500000000001E+01,      /* K = 25 */
(PID.TID 0016.0001)                 8.766500000000001E+01,      /* K = 26 */
(PID.TID 0016.0001)                 9.206999999999999E+01,      /* K = 27 */
(PID.TID 0016.0001)                 9.527000000000000E+01,      /* K = 28 */
(PID.TID 0016.0001)                 9.741499999999999E+01,      /* K = 29 */
(PID.TID 0016.0001)                 9.875000000000000E+01,      /* K = 30 */
(PID.TID 0016.0001)                 9.963000000000000E+01,      /* K = 31 */
(PID.TID 0016.0001)                 1.006700000000000E+02,      /* K = 32 */
(PID.TID 0016.0001)                 1.029450000000000E+02,      /* K = 33 */
(PID.TID 0016.0001)                 1.079450000000000E+02,      /* K = 34 */
(PID.TID 0016.0001)                 1.170800000000000E+02,      /* K = 35 */
(PID.TID 0016.0001)                 1.309600000000000E+02,      /* K = 36 */
(PID.TID 0016.0001)                 1.490150000000000E+02,      /* K = 37 */
(PID.TID 0016.0001)                 1.698850000000000E+02,      /* K = 38 */
(PID.TID 0016.0001)                 1.921900000000000E+02,      /* K = 39 */
(PID.TID 0016.0001)                 2.150250000000000E+02,      /* K = 40 */
(PID.TID 0016.0001)                 2.380000000000000E+02,      /* K = 41 */
(PID.TID 0016.0001)                 2.610000000000000E+02,      /* K = 42 */
(PID.TID 0016.0001)                 2.840000000000000E+02,      /* K = 43 */
(PID.TID 0016.0001)                 3.070000000000000E+02,      /* K = 44 */
(PID.TID 0016.0001)                 3.300000000000000E+02,      /* K = 45 */
(PID.TID 0016.0001)                 3.530000000000000E+02,      /* K = 46 */
(PID.TID 0016.0001)                 3.760000000000000E+02,      /* K = 47 */
(PID.TID 0016.0001)                 3.990000000000000E+02,      /* K = 48 */
(PID.TID 0016.0001)                 4.220000000000000E+02,      /* K = 49 */
(PID.TID 0016.0001)                 4.450000000000000E+02,      /* K = 50 */
(PID.TID 0016.0001)                 2.282500000000000E+02       /* K = 51 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) drF =   /* W spacing ( units of r ) */
(PID.TID 0016.0001)     7 @  1.000000000000000E+01,             /* K =  1:  7 */
(PID.TID 0016.0001)                 1.001000000000000E+01,      /* K =  8 */
(PID.TID 0016.0001)                 1.003000000000000E+01,      /* K =  9 */
(PID.TID 0016.0001)                 1.011000000000000E+01,      /* K = 10 */
(PID.TID 0016.0001)                 1.032000000000000E+01,      /* K = 11 */
(PID.TID 0016.0001)                 1.080000000000000E+01,      /* K = 12 */
(PID.TID 0016.0001)                 1.176000000000000E+01,      /* K = 13 */
(PID.TID 0016.0001)                 1.342000000000000E+01,      /* K = 14 */
(PID.TID 0016.0001)                 1.604000000000000E+01,      /* K = 15 */
(PID.TID 0016.0001)                 1.982000000000000E+01,      /* K = 16 */
(PID.TID 0016.0001)                 2.485000000000000E+01,      /* K = 17 */
(PID.TID 0016.0001)                 3.110000000000000E+01,      /* K = 18 */
(PID.TID 0016.0001)                 3.842000000000000E+01,      /* K = 19 */
(PID.TID 0016.0001)                 4.650000000000000E+01,      /* K = 20 */
(PID.TID 0016.0001)                 5.500000000000000E+01,      /* K = 21 */
(PID.TID 0016.0001)                 6.350000000000000E+01,      /* K = 22 */
(PID.TID 0016.0001)                 7.158000000000000E+01,      /* K = 23 */
(PID.TID 0016.0001)                 7.890000000000001E+01,      /* K = 24 */
(PID.TID 0016.0001)                 8.515000000000001E+01,      /* K = 25 */
(PID.TID 0016.0001)                 9.018000000000001E+01,      /* K = 26 */
(PID.TID 0016.0001)                 9.395999999999999E+01,      /* K = 27 */
(PID.TID 0016.0001)                 9.658000000000000E+01,      /* K = 28 */
(PID.TID 0016.0001)                 9.825000000000000E+01,      /* K = 29 */
(PID.TID 0016.0001)                 9.925000000000000E+01,      /* K = 30 */
(PID.TID 0016.0001)                 1.000100000000000E+02,      /* K = 31 */
(PID.TID 0016.0001)                 1.013300000000000E+02,      /* K = 32 */
(PID.TID 0016.0001)                 1.045600000000000E+02,      /* K = 33 */
(PID.TID 0016.0001)                 1.113300000000000E+02,      /* K = 34 */
(PID.TID 0016.0001)                 1.228300000000000E+02,      /* K = 35 */
(PID.TID 0016.0001)                 1.390900000000000E+02,      /* K = 36 */
(PID.TID 0016.0001)                 1.589400000000000E+02,      /* K = 37 */
(PID.TID 0016.0001)                 1.808300000000000E+02,      /* K = 38 */
(PID.TID 0016.0001)                 2.035500000000000E+02,      /* K = 39 */
(PID.TID 0016.0001)                 2.265000000000000E+02,      /* K = 40 */
(PID.TID 0016.0001)                 2.495000000000000E+02,      /* K = 41 */
(PID.TID 0016.0001)                 2.725000000000000E+02,      /* K = 42 */
(PID.TID 0016.0001)                 2.955000000000000E+02,      /* K = 43 */
(PID.TID 0016.0001)                 3.185000000000000E+02,      /* K = 44 */
(PID.TID 0016.0001)                 3.415000000000000E+02,      /* K = 45 */
(PID.TID 0016.0001)                 3.645000000000000E+02,      /* K = 46 */
(PID.TID 0016.0001)                 3.875000000000000E+02,      /* K = 47 */
(PID.TID 0016.0001)                 4.105000000000000E+02,      /* K = 48 */
(PID.TID 0016.0001)                 4.335000000000000E+02,      /* K = 49 */
(PID.TID 0016.0001)                 4.565000000000000E+02       /* K = 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) delX = /* U spacing ( m - cartesian, degrees - spherical ) */
(PID.TID 0016.0001)   300 @  8.333300000000000E-02              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) delY = /* V spacing ( m - cartesian, degrees - spherical ) */
(PID.TID 0016.0001)   204 @  8.333300000000000E-02              /* J =  1:204 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) xgOrigin = /* X-axis origin of West  edge (cartesian: m, lat-lon: deg) */
(PID.TID 0016.0001)                 1.100000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) ygOrigin = /* Y-axis origin of South edge (cartesian: m, lat-lon: deg) */
(PID.TID 0016.0001)                 3.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rSphere =  /* Radius ( ignored - cartesian, m - spherical ) */
(PID.TID 0016.0001)                 6.370000000000000E+06
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) deepAtmosphere = /* Deep/Shallow Atmosphere flag (True/False) */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) xC =  /* xC(:,1,:,1) : P-point X coord ( deg. or m if cartesian) */
(PID.TID 0016.0001)                 1.100416665000000E+02,      /* I =  1 */
(PID.TID 0016.0001)                 1.101249995000000E+02,      /* I =  2 */
(PID.TID 0016.0001)                 1.102083325000000E+02,      /* I =  3 */
(PID.TID 0016.0001)      . . .
(PID.TID 0016.0001)                 1.160416424999997E+02,      /* I = 73 */
(PID.TID 0016.0001)                 1.161249754999997E+02,      /* I = 74 */
(PID.TID 0016.0001)                 1.162083084999997E+02,      /* I = 75 */
(PID.TID 0016.0001)                 1.162916414999997E+02,      /* I = 76 */
(PID.TID 0016.0001)                 1.163749744999997E+02,      /* I = 77 */
(PID.TID 0016.0001)                 1.164583074999997E+02,      /* I = 78 */
(PID.TID 0016.0001)      . . .
(PID.TID 0016.0001)                 1.222916174999994E+02,      /* I =148 */
(PID.TID 0016.0001)                 1.223749504999994E+02,      /* I =149 */
(PID.TID 0016.0001)                 1.224582834999994E+02,      /* I =150 */
(PID.TID 0016.0001)                 1.225416164999994E+02,      /* I =151 */
(PID.TID 0016.0001)                 1.226249494999994E+02,      /* I =152 */
(PID.TID 0016.0001)                 1.227082824999994E+02,      /* I =153 */
(PID.TID 0016.0001)      . . .
(PID.TID 0016.0001)                 1.285415924999992E+02,      /* I =223 */
(PID.TID 0016.0001)                 1.286249254999992E+02,      /* I =224 */
(PID.TID 0016.0001)                 1.287082584999993E+02,      /* I =225 */
(PID.TID 0016.0001)                 1.287915914999992E+02,      /* I =226 */
(PID.TID 0016.0001)                 1.288749244999993E+02,      /* I =227 */
(PID.TID 0016.0001)                 1.289582574999993E+02,      /* I =228 */
(PID.TID 0016.0001)      . . .
(PID.TID 0016.0001)                 1.347915675000000E+02,      /* I =298 */
(PID.TID 0016.0001)                 1.348749005000000E+02,      /* I =299 */
(PID.TID 0016.0001)                 1.349582335000000E+02       /* I =300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) yC =  /* yC(1,:,1,:) : P-point Y coord ( deg. or m if cartesian) */
(PID.TID 0016.0001)                 1.904160249999994E+01,      /* J =  1 */
(PID.TID 0016.0001)                 1.912493549999994E+01,      /* J =  2 */
(PID.TID 0016.0001)                 1.920826849999994E+01,      /* J =  3 */
(PID.TID 0016.0001)                 1.929160149999994E+01,      /* J =  4 */
(PID.TID 0016.0001)                 1.937493449999994E+01,      /* J =  5 */
(PID.TID 0016.0001)                 1.945826749999994E+01,      /* J =  6 */
(PID.TID 0016.0001)                 1.954160049999994E+01,      /* J =  7 */
(PID.TID 0016.0001)                 1.962493349999994E+01,      /* J =  8 */
(PID.TID 0016.0001)                 1.970826649999994E+01,      /* J =  9 */
(PID.TID 0016.0001)                 1.979159949999994E+01,      /* J = 10 */
(PID.TID 0016.0001)                 1.987493249999994E+01,      /* J = 11 */
(PID.TID 0016.0001)                 1.995826549999994E+01       /* J = 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rcoord = /* P-point R coordinate (  units of r ) */
(PID.TID 0016.0001)                -5.000000000000000E+00,      /* K =  1 */
(PID.TID 0016.0001)                -1.500000000000000E+01,      /* K =  2 */
(PID.TID 0016.0001)                -2.500000000000000E+01,      /* K =  3 */
(PID.TID 0016.0001)                -3.500000000000000E+01,      /* K =  4 */
(PID.TID 0016.0001)                -4.500000000000000E+01,      /* K =  5 */
(PID.TID 0016.0001)                -5.500000000000000E+01,      /* K =  6 */
(PID.TID 0016.0001)                -6.500000000000000E+01,      /* K =  7 */
(PID.TID 0016.0001)                -7.500500000000000E+01,      /* K =  8 */
(PID.TID 0016.0001)                -8.502499999999999E+01,      /* K =  9 */
(PID.TID 0016.0001)                -9.509500000000000E+01,      /* K = 10 */
(PID.TID 0016.0001)                -1.053100000000000E+02,      /* K = 11 */
(PID.TID 0016.0001)                -1.158700000000000E+02,      /* K = 12 */
(PID.TID 0016.0001)                -1.271500000000000E+02,      /* K = 13 */
(PID.TID 0016.0001)                -1.397400000000000E+02,      /* K = 14 */
(PID.TID 0016.0001)                -1.544700000000000E+02,      /* K = 15 */
(PID.TID 0016.0001)                -1.724000000000000E+02,      /* K = 16 */
(PID.TID 0016.0001)                -1.947350000000000E+02,      /* K = 17 */
(PID.TID 0016.0001)                -2.227100000000000E+02,      /* K = 18 */
(PID.TID 0016.0001)                -2.574700000000000E+02,      /* K = 19 */
(PID.TID 0016.0001)                -2.999300000000000E+02,      /* K = 20 */
(PID.TID 0016.0001)                -3.506800000000000E+02,      /* K = 21 */
(PID.TID 0016.0001)                -4.099300000000000E+02,      /* K = 22 */
(PID.TID 0016.0001)                -4.774700000000000E+02,      /* K = 23 */
(PID.TID 0016.0001)                -5.527100000000000E+02,      /* K = 24 */
(PID.TID 0016.0001)                -6.347350000000000E+02,      /* K = 25 */
(PID.TID 0016.0001)                -7.224000000000000E+02,      /* K = 26 */
(PID.TID 0016.0001)                -8.144700000000000E+02,      /* K = 27 */
(PID.TID 0016.0001)                -9.097400000000000E+02,      /* K = 28 */
(PID.TID 0016.0001)                -1.007155000000000E+03,      /* K = 29 */
(PID.TID 0016.0001)                -1.105905000000000E+03,      /* K = 30 */
(PID.TID 0016.0001)                -1.205535000000000E+03,      /* K = 31 */
(PID.TID 0016.0001)                -1.306205000000000E+03,      /* K = 32 */
(PID.TID 0016.0001)                -1.409150000000000E+03,      /* K = 33 */
(PID.TID 0016.0001)                -1.517095000000000E+03,      /* K = 34 */
(PID.TID 0016.0001)                -1.634175000000000E+03,      /* K = 35 */
(PID.TID 0016.0001)                -1.765135000000000E+03,      /* K = 36 */
(PID.TID 0016.0001)                -1.914150000000000E+03,      /* K = 37 */
(PID.TID 0016.0001)                -2.084035000000000E+03,      /* K = 38 */
(PID.TID 0016.0001)                -2.276225000000000E+03,      /* K = 39 */
(PID.TID 0016.0001)                -2.491250000000000E+03,      /* K = 40 */
(PID.TID 0016.0001)                -2.729250000000000E+03,      /* K = 41 */
(PID.TID 0016.0001)                -2.990250000000000E+03,      /* K = 42 */
(PID.TID 0016.0001)                -3.274250000000000E+03,      /* K = 43 */
(PID.TID 0016.0001)                -3.581250000000000E+03,      /* K = 44 */
(PID.TID 0016.0001)                -3.911250000000000E+03,      /* K = 45 */
(PID.TID 0016.0001)                -4.264250000000000E+03,      /* K = 46 */
(PID.TID 0016.0001)                -4.640250000000000E+03,      /* K = 47 */
(PID.TID 0016.0001)                -5.039250000000000E+03,      /* K = 48 */
(PID.TID 0016.0001)                -5.461250000000000E+03,      /* K = 49 */
(PID.TID 0016.0001)                -5.906250000000000E+03       /* K = 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rF =   /* W-Interf. R coordinate (  units of r ) */
(PID.TID 0016.0001)                 0.000000000000000E+00,      /* K =  1 */
(PID.TID 0016.0001)                -1.000000000000000E+01,      /* K =  2 */
(PID.TID 0016.0001)                -2.000000000000000E+01,      /* K =  3 */
(PID.TID 0016.0001)                -3.000000000000000E+01,      /* K =  4 */
(PID.TID 0016.0001)                -4.000000000000000E+01,      /* K =  5 */
(PID.TID 0016.0001)                -5.000000000000000E+01,      /* K =  6 */
(PID.TID 0016.0001)                -6.000000000000000E+01,      /* K =  7 */
(PID.TID 0016.0001)                -7.000000000000000E+01,      /* K =  8 */
(PID.TID 0016.0001)                -8.001000000000001E+01,      /* K =  9 */
(PID.TID 0016.0001)                -9.004000000000001E+01,      /* K = 10 */
(PID.TID 0016.0001)                -1.001500000000000E+02,      /* K = 11 */
(PID.TID 0016.0001)                -1.104700000000000E+02,      /* K = 12 */
(PID.TID 0016.0001)                -1.212700000000000E+02,      /* K = 13 */
(PID.TID 0016.0001)                -1.330300000000000E+02,      /* K = 14 */
(PID.TID 0016.0001)                -1.464500000000000E+02,      /* K = 15 */
(PID.TID 0016.0001)                -1.624900000000000E+02,      /* K = 16 */
(PID.TID 0016.0001)                -1.823100000000000E+02,      /* K = 17 */
(PID.TID 0016.0001)                -2.071600000000000E+02,      /* K = 18 */
(PID.TID 0016.0001)                -2.382600000000000E+02,      /* K = 19 */
(PID.TID 0016.0001)                -2.766799999999999E+02,      /* K = 20 */
(PID.TID 0016.0001)                -3.231799999999999E+02,      /* K = 21 */
(PID.TID 0016.0001)                -3.781799999999999E+02,      /* K = 22 */
(PID.TID 0016.0001)                -4.416799999999999E+02,      /* K = 23 */
(PID.TID 0016.0001)                -5.132600000000000E+02,      /* K = 24 */
(PID.TID 0016.0001)                -5.921600000000000E+02,      /* K = 25 */
(PID.TID 0016.0001)                -6.773099999999999E+02,      /* K = 26 */
(PID.TID 0016.0001)                -7.674900000000000E+02,      /* K = 27 */
(PID.TID 0016.0001)                -8.614500000000000E+02,      /* K = 28 */
(PID.TID 0016.0001)                -9.580300000000001E+02,      /* K = 29 */
(PID.TID 0016.0001)                -1.056280000000000E+03,      /* K = 30 */
(PID.TID 0016.0001)                -1.155530000000000E+03,      /* K = 31 */
(PID.TID 0016.0001)                -1.255540000000000E+03,      /* K = 32 */
(PID.TID 0016.0001)                -1.356870000000000E+03,      /* K = 33 */
(PID.TID 0016.0001)                -1.461430000000000E+03,      /* K = 34 */
(PID.TID 0016.0001)                -1.572760000000000E+03,      /* K = 35 */
(PID.TID 0016.0001)                -1.695590000000000E+03,      /* K = 36 */
(PID.TID 0016.0001)                -1.834680000000000E+03,      /* K = 37 */
(PID.TID 0016.0001)                -1.993620000000000E+03,      /* K = 38 */
(PID.TID 0016.0001)                -2.174450000000000E+03,      /* K = 39 */
(PID.TID 0016.0001)                -2.378000000000000E+03,      /* K = 40 */
(PID.TID 0016.0001)                -2.604500000000000E+03,      /* K = 41 */
(PID.TID 0016.0001)                -2.854000000000000E+03,      /* K = 42 */
(PID.TID 0016.0001)                -3.126500000000000E+03,      /* K = 43 */
(PID.TID 0016.0001)                -3.422000000000000E+03,      /* K = 44 */
(PID.TID 0016.0001)                -3.740500000000000E+03,      /* K = 45 */
(PID.TID 0016.0001)                -4.082000000000000E+03,      /* K = 46 */
(PID.TID 0016.0001)                -4.446500000000000E+03,      /* K = 47 */
(PID.TID 0016.0001)                -4.834000000000000E+03,      /* K = 48 */
(PID.TID 0016.0001)                -5.244500000000000E+03,      /* K = 49 */
(PID.TID 0016.0001)                -5.678000000000000E+03,      /* K = 50 */
(PID.TID 0016.0001)                -6.134500000000000E+03       /* K = 51 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) deepFacC = /* deep-model grid factor @ cell-Center (-) */
(PID.TID 0016.0001)    50 @  1.000000000000000E+00              /* K =  1: 50 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) deepFacF = /* deep-model grid factor @ W-Interface (-) */
(PID.TID 0016.0001)    51 @  1.000000000000000E+00              /* K =  1: 51 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rotateGrid = /* use rotated grid ( True/False ) */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) phiEuler = /* Euler angle, rotation about original z-coordinate [rad] */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) thetaEuler = /* Euler angle, rotation about new x-coordinate [rad] */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) psiEuler = /* Euler angle, rotation about new z-coordinate [rad] */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dxF =  /* dxF(:,1,:,1) ( units: m ) */
(PID.TID 0016.0001)   300 @  8.757803027752661E+03              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dxF =  /* dxF(1,:,1,:) ( units: m ) */
(PID.TID 0016.0001)                 8.757803027752661E+03,      /* J =  1 */
(PID.TID 0016.0001)                 8.753397491181740E+03,      /* J =  2 */
(PID.TID 0016.0001)                 8.748973437836123E+03,      /* J =  3 */
(PID.TID 0016.0001)                 8.744530877074365E+03,      /* J =  4 */
(PID.TID 0016.0001)                 8.740069818294181E+03,      /* J =  5 */
(PID.TID 0016.0001)                 8.735590270932409E+03,      /* J =  6 */
(PID.TID 0016.0001)                 8.731092244465002E+03,      /* J =  7 */
(PID.TID 0016.0001)                 8.726575748407002E+03,      /* J =  8 */
(PID.TID 0016.0001)                 8.722040792312520E+03,      /* J =  9 */
(PID.TID 0016.0001)                 8.717487385774719E+03,      /* J = 10 */
(PID.TID 0016.0001)                 8.712915538425788E+03,      /* J = 11 */
(PID.TID 0016.0001)                 8.708325259936932E+03       /* J = 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dyF =  /* dyF(:,1,:,1) ( units: m ) */
(PID.TID 0016.0001)   300 @  9.264752386845450E+03              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dyF =  /* dyF(1,:,1,:) ( units: m ) */
(PID.TID 0016.0001)    12 @  9.264752386845450E+03              /* J =  1: 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dxG =  /* dxG(:,1,:,1) ( units: m ) */
(PID.TID 0016.0001)   300 @  8.759998849333768E+03              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dxG =  /* dxG(1,:,1,:) ( units: m ) */
(PID.TID 0016.0001)                 8.759998849333768E+03,      /* J =  1 */
(PID.TID 0016.0001)                 8.755602574647419E+03,      /* J =  2 */
(PID.TID 0016.0001)                 8.751187778521777E+03,      /* J =  3 */
(PID.TID 0016.0001)                 8.746754470295820E+03,      /* J =  4 */
(PID.TID 0016.0001)                 8.742302659347690E+03,      /* J =  5 */
(PID.TID 0016.0001)                 8.737832355094662E+03,      /* J =  6 */
(PID.TID 0016.0001)                 8.733343566993137E+03,      /* J =  7 */
(PID.TID 0016.0001)                 8.728836304538610E+03,      /* J =  8 */
(PID.TID 0016.0001)                 8.724310577265664E+03,      /* J =  9 */
(PID.TID 0016.0001)                 8.719766394747938E+03,      /* J = 10 */
(PID.TID 0016.0001)                 8.715203766598108E+03,      /* J = 11 */
(PID.TID 0016.0001)                 8.710622702467877E+03       /* J = 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dyG =  /* dyG(:,1,:,1) ( units: m ) */
(PID.TID 0016.0001)   300 @  9.264752386845450E+03              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dyG =  /* dyG(1,:,1,:) ( units: m ) */
(PID.TID 0016.0001)    12 @  9.264752386845450E+03              /* J =  1: 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dxC =  /* dxC(:,1,:,1) ( units: m ) */
(PID.TID 0016.0001)   300 @  8.757803027752661E+03              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dxC =  /* dxC(1,:,1,:) ( units: m ) */
(PID.TID 0016.0001)                 8.757803027752661E+03,      /* J =  1 */
(PID.TID 0016.0001)                 8.753397491181740E+03,      /* J =  2 */
(PID.TID 0016.0001)                 8.748973437836123E+03,      /* J =  3 */
(PID.TID 0016.0001)                 8.744530877074365E+03,      /* J =  4 */
(PID.TID 0016.0001)                 8.740069818294181E+03,      /* J =  5 */
(PID.TID 0016.0001)                 8.735590270932409E+03,      /* J =  6 */
(PID.TID 0016.0001)                 8.731092244465002E+03,      /* J =  7 */
(PID.TID 0016.0001)                 8.726575748407002E+03,      /* J =  8 */
(PID.TID 0016.0001)                 8.722040792312520E+03,      /* J =  9 */
(PID.TID 0016.0001)                 8.717487385774719E+03,      /* J = 10 */
(PID.TID 0016.0001)                 8.712915538425788E+03,      /* J = 11 */
(PID.TID 0016.0001)                 8.708325259936932E+03       /* J = 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dyC =  /* dyC(:,1,:,1) ( units: m ) */
(PID.TID 0016.0001)   300 @  9.264752386845450E+03              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dyC =  /* dyC(1,:,1,:) ( units: m ) */
(PID.TID 0016.0001)    12 @  9.264752386845450E+03              /* J =  1: 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dxV =  /* dxV(:,1,:,1) ( units: m ) */
(PID.TID 0016.0001)   300 @  8.759998849333768E+03              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dxV =  /* dxV(1,:,1,:) ( units: m ) */
(PID.TID 0016.0001)                 8.759998849333768E+03,      /* J =  1 */
(PID.TID 0016.0001)                 8.755602574647419E+03,      /* J =  2 */
(PID.TID 0016.0001)                 8.751187778521777E+03,      /* J =  3 */
(PID.TID 0016.0001)                 8.746754470295820E+03,      /* J =  4 */
(PID.TID 0016.0001)                 8.742302659347690E+03,      /* J =  5 */
(PID.TID 0016.0001)                 8.737832355094662E+03,      /* J =  6 */
(PID.TID 0016.0001)                 8.733343566993137E+03,      /* J =  7 */
(PID.TID 0016.0001)                 8.728836304538610E+03,      /* J =  8 */
(PID.TID 0016.0001)                 8.724310577265664E+03,      /* J =  9 */
(PID.TID 0016.0001)                 8.719766394747938E+03,      /* J = 10 */
(PID.TID 0016.0001)                 8.715203766598108E+03,      /* J = 11 */
(PID.TID 0016.0001)                 8.710622702467877E+03       /* J = 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dyU =  /* dyU(:,1,:,1) ( units: m ) */
(PID.TID 0016.0001)   300 @  9.264752386845450E+03              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) dyU =  /* dyU(1,:,1,:) ( units: m ) */
(PID.TID 0016.0001)    12 @  9.264752386845450E+03              /* J =  1: 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rA  =  /* rA (:,1,:,1) ( units: m^2 ) */
(PID.TID 0016.0001)   300 @  8.113886935323969E+07              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rA  =  /* rA (1,:,1,:) ( units: m^2 ) */
(PID.TID 0016.0001)                 8.113886935323969E+07,      /* J =  1 */
(PID.TID 0016.0001)                 8.109805315137601E+07,      /* J =  2 */
(PID.TID 0016.0001)                 8.105706539619544E+07,      /* J =  3 */
(PID.TID 0016.0001)                 8.101590617440251E+07,      /* J =  4 */
(PID.TID 0016.0001)                 8.097457557306211E+07,      /* J =  5 */
(PID.TID 0016.0001)                 8.093307367960934E+07,      /* J =  6 */
(PID.TID 0016.0001)                 8.089140058183311E+07,      /* J =  7 */
(PID.TID 0016.0001)                 8.084955636788599E+07,      /* J =  8 */
(PID.TID 0016.0001)                 8.080754112629069E+07,      /* J =  9 */
(PID.TID 0016.0001)                 8.076535494591728E+07,      /* J = 10 */
(PID.TID 0016.0001)                 8.072299791601574E+07,      /* J = 11 */
(PID.TID 0016.0001)                 8.068047012617688E+07       /* J = 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rAw =  /* rAw(:,1,:,1) ( units: m^2 ) */
(PID.TID 0016.0001)   300 @  8.113886935323969E+07              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rAw =  /* rAw(1,:,1,:) ( units: m^2 ) */
(PID.TID 0016.0001)                 8.113886935323969E+07,      /* J =  1 */
(PID.TID 0016.0001)                 8.109805315137601E+07,      /* J =  2 */
(PID.TID 0016.0001)                 8.105706539619544E+07,      /* J =  3 */
(PID.TID 0016.0001)                 8.101590617440251E+07,      /* J =  4 */
(PID.TID 0016.0001)                 8.097457557306211E+07,      /* J =  5 */
(PID.TID 0016.0001)                 8.093307367960934E+07,      /* J =  6 */
(PID.TID 0016.0001)                 8.089140058183311E+07,      /* J =  7 */
(PID.TID 0016.0001)                 8.084955636788599E+07,      /* J =  8 */
(PID.TID 0016.0001)                 8.080754112629069E+07,      /* J =  9 */
(PID.TID 0016.0001)                 8.076535494591728E+07,      /* J = 10 */
(PID.TID 0016.0001)                 8.072299791601574E+07,      /* J = 11 */
(PID.TID 0016.0001)                 8.068047012617688E+07       /* J = 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rAs =  /* rAs(:,1,:,1) ( units: m^2 ) */
(PID.TID 0016.0001)   300 @  8.115921309468202E+07              /* I =  1:300 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) rAs =  /* rAs(1,:,1,:) ( units: m^2 ) */
(PID.TID 0016.0001)                 8.115921309468202E+07,      /* J =  1 */
(PID.TID 0016.0001)                 8.111848270187716E+07,      /* J =  2 */
(PID.TID 0016.0001)                 8.107758071254072E+07,      /* J =  3 */
(PID.TID 0016.0001)                 8.103650721319051E+07,      /* J =  4 */
(PID.TID 0016.0001)                 8.099526229072107E+07,      /* J =  5 */
(PID.TID 0016.0001)                 8.095384603237423E+07,      /* J =  6 */
(PID.TID 0016.0001)                 8.091225852575868E+07,      /* J =  7 */
(PID.TID 0016.0001)                 8.087049985885663E+07,      /* J =  8 */
(PID.TID 0016.0001)                 8.082857012000084E+07,      /* J =  9 */
(PID.TID 0016.0001)                 8.078646939788111E+07,      /* J = 10 */
(PID.TID 0016.0001)                 8.074419778156732E+07,      /* J = 11 */
(PID.TID 0016.0001)                 8.070175536047329E+07       /* J = 12 */
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) globalArea = /* Integrated horizontal Area (m^2) */
(PID.TID 0016.0001)                 4.368662964259253E+12
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // End of Model config. summary
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) 
(PID.TID 0016.0001) == Packages configuration : Check & print summary ==
(PID.TID 0016.0001) 
(PID.TID 0016.0001) OBCS_CHECK: #define ALLOW_OBCS
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // OBCS_CHECK: OBCS configuration summary
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) 
(PID.TID 0016.0001) useOBCSprescribe = /* prescribe OB values */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useOBCSbalance = /* balance the flow through OB */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSbalanceSurf = /* include surf. flux in balance */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCS_balanceFacN = /* Northern OB Factor for balancing OB flow [-] */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCS_balanceFacS = /* Southern OB Factor for balancing OB flow [-] */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCS_balanceFacE = /* Eastern  OB Factor for balancing OB flow [-] */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCS_balanceFacW = /* Western  OB Factor for balancing OB flow [-] */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSfixTopo =  /* mod. topo to have zero gradient across boundaries. */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCS_uvApplyFac = /* Factor to apply to U,V 2nd column/row */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCS_u1_adv_T = /* Temp uses upwind adv-scheme @ OB */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCS_u1_adv_S = /* Salt uses upwind adv-scheme @ OB */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCS_monitorFreq = /* monitor output frequency [s] */
(PID.TID 0016.0001)                 3.000000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCS_monSelect = /* select group of variables to monitor */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSprintDiags =  /* print some OBCS diagnostics. */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useOBCStides = /* apply tidal forcing through OB */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useOrlanskiNorth =  /* use Orlanski for northern bound. */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useOrlanskiSouth =  /* use Orlanski for southern bound. */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useOrlanskiEast  =  /* use Orlanski for eastern bound. */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useOrlanskiWest  =  /* use Orlanski for western bound. */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useStevensNorth =  /* use Stevens for northern bound. */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useStevensSouth =  /* use Stevens for southern bound. */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useStevensEast  =  /* use Stevens for eastern bound. */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useStevensWest  =  /* use Stevens for western bound. */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useStevensPhaseVel  =  /* include phase vel. term. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useStevensAdvection  =  /* include advection term. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) TrelaxStevens = /* relaxation time scale for theta ( s ). */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) SrelaxStevens = /* relaxation time scale for salinity ( s ). */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useOBCSSponge =  /* use sponge along boundaries */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSSponge_N =  /* use sponge for northern boundary */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSSponge_S =  /* use sponge for southern boundary */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSSponge_E =  /* use sponge for eastern boundary */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSSponge_W =  /* use sponge for western boundary */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSSponge_UatNS =  /* use u-vel. sponge at N/S bound. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSSponge_UatEW =  /* use u-vel. sponge at E/W bound. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSSponge_VatNS =  /* use v-vel. sponge at N/S bound. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSSponge_VatEW =  /* use v-vel. sponge at E/W bound. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSSponge_Theta =  /* use sponge for Theta. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OBCSSponge_Salt =  /* use sponge for salinity. */
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useLinearSponge =  /* use linear sponge. */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) spongeThickness = /* number grid points in sponge */
(PID.TID 0016.0001)                      10
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) Urelaxobcsinner = /* innermost relaxation time scale, u-velocity ( s ). */
(PID.TID 0016.0001)                 1.296000000000000E+06
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) Urelaxobcsbound = /* boudnary relaxation time scale, u-velocity ( s ). */
(PID.TID 0016.0001)                 4.320000000000000E+04
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) Vrelaxobcsinner = /* innermost relaxation time scale, v-velocity ( s ). */
(PID.TID 0016.0001)                 1.296000000000000E+06
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) Vrelaxobcsbound = /* boundary relaxation time scale, v-velocity ( s ). */
(PID.TID 0016.0001)                 4.320000000000000E+04
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useSeaiceSponge =  /* use sponge for sea ice variables */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) useSeaiceNeumann =  /* use Neumann conditions for sea ice variables */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) OB_indexNone = /* null value for OB index (i.e. no OB) */
(PID.TID 0016.0001)                     -99
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // End of OBCS config. summary
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) 
(PID.TID 0016.0001) OBCS_CHECK: #define ALLOW_ORLANSKI
(PID.TID 0016.0001) OBCS_CHECK: set-up OK
(PID.TID 0016.0001) OBCS_CHECK: check Inside Mask and OB locations: OK
(PID.TID 0016.0001) 
(PID.TID 0016.0001) KPP_CHECK: #define ALLOW_KPP
(PID.TID 0016.0001)  kpp_freq = /* frequency of KPP calculation */
(PID.TID 0016.0001)                 3.000000000000000E+02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) KPP_ghatUseTotalDiffus= /* non-local term fct of total diffus */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) KPPuseDoubleDiff = /* include double diffusive contrib */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) LimitHblStable = /* limits depth of hbl if stable cond.*/
(PID.TID 0016.0001)                   T
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  minKPPhbl = /* minimum KPPhbl value [m] */
(PID.TID 0016.0001)                 5.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  epsln     = /* constant [-] */
(PID.TID 0016.0001)                 9.999999999999999E-21
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  phepsi    = /* constant [-] */
(PID.TID 0016.0001)                 1.000000000000000E-10
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  epsilon   = /* constant [-] */
(PID.TID 0016.0001)                 1.000000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  vonk      = /* Von Karmans constant [-] */
(PID.TID 0016.0001)                 4.000000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  dB_dz     = /* maximum N^2 in mixed layer [s^-2] */
(PID.TID 0016.0001)                 5.200000000000000E-05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  conc1     = /* scalar constant [-] */
(PID.TID 0016.0001)                 5.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  conam     = /* scalar constant [-] */
(PID.TID 0016.0001)                 1.257000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  concm     = /* scalar constant [-] */
(PID.TID 0016.0001)                 8.380000000000001E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  conc2     = /* scalar constant [-] */
(PID.TID 0016.0001)                 1.600000000000000E+01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  conas     = /* scalar constant [-] */
(PID.TID 0016.0001)                -2.886000000000000E+01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  concs     = /* scalar constant [-] */
(PID.TID 0016.0001)                 9.895999999999999E+01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  conc3     = /* scalar constant [-] */
(PID.TID 0016.0001)                 1.600000000000000E+01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  zetam     = /* scalar constant [-] */
(PID.TID 0016.0001)                -2.000000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  zetas     = /* scalar constant [-] */
(PID.TID 0016.0001)                -1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  Ricr      = /* critical bulk Richardson Number [-] */
(PID.TID 0016.0001)                 3.583000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  cekman    = /* coeff for Ekman depth [-] */
(PID.TID 0016.0001)                 7.000000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  cmonob    = /* coeff for Monin-Obukhov depth [-] */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  concv     = /* buoyancy freq ratio [-] */
(PID.TID 0016.0001)                 1.800000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  hbf       = /* solar radiation depth ratio [-] */
(PID.TID 0016.0001)                 1.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  zmin      = /* minimum for zehat in table [m3/s3] */
(PID.TID 0016.0001)                -4.000000000000000E-07
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  zmax      = /* maximum for zehat in table [m3/s3] */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  umin      = /* minimum for ustar in table [m/s] */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  umax      = /* maximum for ustar in table [m/s] */
(PID.TID 0016.0001)                 4.000000000000000E-02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) num_v_smooth_Ri = /* number of vertical smoothing */
(PID.TID 0016.0001)                       0
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  Riinfty   = /* shear instability Ri number limit [-] */
(PID.TID 0016.0001)                 6.998000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  BVSQcon   = /* Brunt-Vaisala squared (=N^2) [s^-2] */
(PID.TID 0016.0001)                -2.000000000000000E-05
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  difm0     = /* max viscosity from shear instab. [m2/s] */
(PID.TID 0016.0001)                 5.000000000000000E-03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  difs0     = /* max diffusiv. from shear instab. [m2/s] */
(PID.TID 0016.0001)                 5.000000000000000E-03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  dift0     = /* max diffusiv. from shear instab. [m2/s] */
(PID.TID 0016.0001)                 5.000000000000000E-03
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  difmcon   = /* convective viscosity [m2/s] */
(PID.TID 0016.0001)                 1.000000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  difscon   = /* convective diffusiv. [m2/s] */
(PID.TID 0016.0001)                 1.000000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  diftcon   = /* convective diffusiv. [m2/s] */
(PID.TID 0016.0001)                 1.000000000000000E-01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  Rrho0     = /* double diffusion density ratio [-] */
(PID.TID 0016.0001)                 1.900000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  dsfmax    = /* max diffusiv. for salt fingering [m2/s] */
(PID.TID 0016.0001)                 1.000000000000000E-02
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  cstar     = /* coeff for non-locak transport [-] */
(PID.TID 0016.0001)                 1.000000000000000E+01
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) KPPwriteState = /* write KPP fields to file */
(PID.TID 0016.0001)                   F
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  kpp_dumpFreq = /* dump freq of KPP output */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001)  kpp_taveFreq = /* time-averaging freq of KPP output */
(PID.TID 0016.0001)                 0.000000000000000E+00
(PID.TID 0016.0001)     ;
(PID.TID 0016.0001) 
(PID.TID 0016.0001) EXF_CHECK: #define ALLOW_EXF
(PID.TID 0016.0001) GAD_CHECK: #define ALLOW_GENERIC_ADVDIFF
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Check Model config. (CONFIG_CHECK):
(PID.TID 0016.0001) // CONFIG_CHECK : Normal End
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) 
(PID.TID 0016.0001) Start initial hydrostatic pressure computation
(PID.TID 0016.0001) Pressure is predetermined for buoyancyRelation OCEANIC
(PID.TID 0016.0001) 
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) // Model current state
(PID.TID 0016.0001) // =======================================================
(PID.TID 0016.0001) 
 cg2d: Sum(rhs),rhsMax =  -6.45677589524001E+03  8.76300862938902E-01
 cg2d: Sum(rhs),rhsMax =  -6.97961846450353E+03  8.10657246893565E-01
 cg2d: Sum(rhs),rhsMax =  -7.70310578665225E+03  7.34519094701530E-01
 cg2d: Sum(rhs),rhsMax =  -8.92453562116473E+03  6.33991339043308E-01
 cg2d: Sum(rhs),rhsMax =  -1.10866422663714E+04  5.10350938801762E-01
 cg2d: Sum(rhs),rhsMax =  -1.19931244413942E+04  4.71776834839894E-01
 cg2d: Sum(rhs),rhsMax =  -1.17596534342008E+04  4.81143285425949E-01
 cg2d: Sum(rhs),rhsMax =  -1.11952370081636E+04  5.05400491715900E-01
 cg2d: Sum(rhs),rhsMax =  -1.09258909250443E+04  5.17859671821588E-01
 cg2d: Sum(rhs),rhsMax =  -9.53175549272027E+03  5.93602961503072E-01
 cg2d: Sum(rhs),rhsMax =  -8.05453809045492E+03  7.02470858696052E-01
 cg2d: Sum(rhs),rhsMax =  -7.21253522648518E+03  7.84478426951023E-01
 cg2d: Sum(rhs),rhsMax =  -6.77586015436639E+03  8.35034690784732E-01
 cg2d: Sum(rhs),rhsMax =  -6.53595233175727E+03  8.65685366355890E-01
 cg2d: Sum(rhs),rhsMax =  -6.37459090519316E+03  8.87598651105984E-01
 cg2d: Sum(rhs),rhsMax =  -6.42591076510886E+03  8.80509937910112E-01
 cg2d: Sum(rhs),rhsMax =  -6.69321245001576E+03  8.45345688793818E-01
 cg2d: Sum(rhs),rhsMax =  -7.23128149254738E+03  7.82444756801847E-01
 cg2d: Sum(rhs),rhsMax =  -8.14391254169846E+03  6.94761671350402E-01
 cg2d: Sum(rhs),rhsMax =  -8.47721255871097E+03  6.67445607812184E-01
 cg2d: Sum(rhs),rhsMax =  -7.22855867629876E+03  7.82739484062545E-01
 cg2d: Sum(rhs),rhsMax =  -6.43924914297720E+03  8.78686033599549E-01
 cg2d: Sum(rhs),rhsMax =  -5.95725663242687E+03  9.49779174864409E-01
 cg2d: Sum(rhs),rhsMax =  -5.70477833832460E+03  9.91813871328017E-01
 cg2d: Sum(rhs),rhsMax =  -5.64520165084405E+03  1.00228098813015E+00
 cg2d: Sum(rhs),rhsMax =  -5.76993264913060E+03  9.80614269328511E-01
 cg2d: Sum(rhs),rhsMax =  -6.10725726592377E+03  9.26451603794703E-01
 cg2d: Sum(rhs),rhsMax =  -6.71442609421678E+03  8.42674892747021E-01
 cg2d: Sum(rhs),rhsMax =  -6.31993660438232E+03  8.95274532481631E-01
 cg2d: Sum(rhs),rhsMax =  -5.75608763793059E+03  9.82972922704857E-01
 cg2d: Sum(rhs),rhsMax =  -5.43004414961792E+03  1.04199489597153E+00
 cg2d: Sum(rhs),rhsMax =  -5.26624302647071E+03  1.07440508543978E+00
 cg2d: Sum(rhs),rhsMax =  -5.23830251856001E+03  1.08013583956913E+00
 cg2d: Sum(rhs),rhsMax =  -5.33843483463993E+03  1.05987587449563E+00
 cg2d: Sum(rhs),rhsMax =  -5.50817476774545E+03  1.02721473580219E+00
 cg2d: Sum(rhs),rhsMax =  -5.68842685244812E+03  9.94664858240529E-01
 cg2d: Sum(rhs),rhsMax =  -6.01001893645719E+03  9.41441008526550E-01
 cg2d: Sum(rhs),rhsMax =  -6.14978552778695E+03  9.20044815097484E-01
 cg2d: Sum(rhs),rhsMax =  -5.89167300060736E+03  9.60351718131445E-01
 cg2d: Sum(rhs),rhsMax =  -5.72935780705921E+03  9.87558899154552E-01
 cg2d: Sum(rhs),rhsMax =  -5.64532407450433E+03  1.00225925281335E+00
 cg2d: Sum(rhs),rhsMax =  -5.63259974550644E+03  1.00452340738676E+00
 cg2d: Sum(rhs),rhsMax =  -5.69146802801089E+03  9.94133369625440E-01
 cg2d: Sum(rhs),rhsMax =  -5.82172428756288E+03  9.71890458792328E-01
 cg2d: Sum(rhs),rhsMax =  -6.02432935750799E+03  9.39204673753500E-01
 cg2d: Sum(rhs),rhsMax =  -6.30859885176541E+03  8.96883511180706E-01
 cg2d: Sum(rhs),rhsMax =  -6.68166310100228E+03  8.46806880752965E-01
 cg2d: Sum(rhs),rhsMax =  -6.97296392398451E+03  8.11430885127650E-01
 cg2d: Sum(rhs),rhsMax =  -7.34448365065005E+03  7.70384761943222E-01
 cg2d: Sum(rhs),rhsMax =  -6.99528752173909E+03  8.08841419486825E-01
 cg2d: Sum(rhs),rhsMax =  -6.78293650190920E+03  8.34163534806694E-01
 cg2d: Sum(rhs),rhsMax =  -6.75848276969070E+03  8.37181728741889E-01
 cg2d: Sum(rhs),rhsMax =  -6.90331773657834E+03  8.19617248503815E-01
 cg2d: Sum(rhs),rhsMax =  -6.20065329665154E+03  9.12497122175398E-01
 cg2d: Sum(rhs),rhsMax =  -5.70119509062537E+03  9.92437234450309E-01
 cg2d: Sum(rhs),rhsMax =  -5.33886292744688E+03  1.05979088912622E+00
 cg2d: Sum(rhs),rhsMax =  -5.08617996230390E+03  1.11244162234460E+00
 cg2d: Sum(rhs),rhsMax =  -4.92472247057297E+03  1.14891312609208E+00
 cg2d: Sum(rhs),rhsMax =  -4.84332134692816E+03  1.16822277183622E+00
 cg2d: Sum(rhs),rhsMax =  -4.83385288504104E+03  1.17051106505776E+00
 cg2d: Sum(rhs),rhsMax =  -4.89446409127187E+03  1.15601589536468E+00
 cg2d: Sum(rhs),rhsMax =  -5.02014828038322E+03  1.12707393741964E+00
 cg2d: Sum(rhs),rhsMax =  -5.21640006065217E+03  1.08467108024965E+00
 cg2d: Sum(rhs),rhsMax =  -5.49290319281578E+03  1.03007063663568E+00
 cg2d: Sum(rhs),rhsMax =  -5.85955402918022E+03  9.65615857559302E-01
 cg2d: Sum(rhs),rhsMax =  -6.33034170264175E+03  8.93802981668544E-01
 cg2d: Sum(rhs),rhsMax =  -6.55439983282177E+03  8.63248876040269E-01
 cg2d: Sum(rhs),rhsMax =  -6.45456773608836E+03  8.76600652459939E-01
 cg2d: Sum(rhs),rhsMax =  -5.98952374934949E+03  9.44662468266603E-01
 cg2d: Sum(rhs),rhsMax =  -5.67631110411455E+03  9.96787911201800E-01
 cg2d: Sum(rhs),rhsMax =  -5.48440061303856E+03  1.03166757646232E+00
 cg2d: Sum(rhs),rhsMax =  -5.39608194135790E+03  1.04855307059664E+00
 cg2d: Sum(rhs),rhsMax =  -5.39843971239766E+03  1.04809511455838E+00
 cg2d: Sum(rhs),rhsMax =  -5.49245965169116E+03  1.03015381952961E+00
 cg2d: Sum(rhs),rhsMax =  -5.68744324352530E+03  9.94836879514042E-01
 cg2d: Sum(rhs),rhsMax =  -5.29760283860067E+03  1.06804501227889E+00
 cg2d: Sum(rhs),rhsMax =  -4.80418089734607E+03  1.17774047432884E+00
 cg2d: Sum(rhs),rhsMax =  -4.41920720645288E+03  1.28033785800767E+00
 cg2d: Sum(rhs),rhsMax =  -4.12006663312708E+03  1.37329776254311E+00
 cg2d: Sum(rhs),rhsMax =  -3.88679382844437E+03  1.45571865618262E+00
 cg2d: Sum(rhs),rhsMax =  -3.71084485297829E+03  1.52474126862534E+00
 cg2d: Sum(rhs),rhsMax =  -3.58680885048429E+03  1.57746858688552E+00
 cg2d: Sum(rhs),rhsMax =  -3.51676723321358E+03  1.60888620530954E+00
 cg2d: Sum(rhs),rhsMax =  -3.48809017104036E+03  1.62211353816990E+00
 cg2d: Sum(rhs),rhsMax =  -3.50279573107218E+03  1.61530352415670E+00
 cg2d: Sum(rhs),rhsMax =  -3.56425808760862E+03  1.58744909872621E+00
 cg2d: Sum(rhs),rhsMax =  -3.68123332380235E+03  1.53700615829417E+00
 cg2d: Sum(rhs),rhsMax =  -3.85583249808171E+03  1.46740769771945E+00
 cg2d: Sum(rhs),rhsMax =  -4.09099891599774E+03  1.38305543584384E+00
 cg2d: Sum(rhs),rhsMax =  -4.40322881591391E+03  1.28498393459654E+00
 cg2d: Sum(rhs),rhsMax =  -4.66921349458648E+03  1.21178401787837E+00
 cg2d: Sum(rhs),rhsMax =  -4.13662134597943E+03  1.36780184009379E+00
 cg2d: Sum(rhs),rhsMax =  -3.75290860920941E+03  1.50765149860493E+00
 cg2d: Sum(rhs),rhsMax =  -3.47715257018501E+03  1.62721599774406E+00
 cg2d: Sum(rhs),rhsMax =  -3.28508605428991E+03  1.72235314244301E+00
 cg2d: Sum(rhs),rhsMax =  -3.16108457957584E+03  1.78991676634009E+00
 cg2d: Sum(rhs),rhsMax =  -3.09429160546017E+03  1.82855367568387E+00
 cg2d: Sum(rhs),rhsMax =  -3.08654157333203E+03  1.83314501177894E+00
 cg2d: Sum(rhs),rhsMax =  -3.12794788828974E+03  1.80887869327503E+00
 cg2d: Sum(rhs),rhsMax =  -3.21570965926130E+03  1.75951155058621E+00
 cg2d: Sum(rhs),rhsMax =  -3.35607112284417E+03  1.68592323633680E+00
 cg2d: Sum(rhs),rhsMax =  -3.55903880630528E+03  1.58977707092655E+00
 cg2d: Sum(rhs),rhsMax =  -3.78246159065456E+03  1.49587197469011E+00
 cg2d: Sum(rhs),rhsMax =  -3.91364449406134E+03  1.44573128637198E+00
 cg2d: Sum(rhs),rhsMax =  -4.09494279329814E+03  1.38172340235425E+00
 cg2d: Sum(rhs),rhsMax =  -3.72732114394460E+03  1.51800128572072E+00
 cg2d: Sum(rhs),rhsMax =  -3.38263865172365E+03  1.67268185323869E+00
 cg2d: Sum(rhs),rhsMax =  -3.15554558000575E+03  1.79305864718063E+00
 cg2d: Sum(rhs),rhsMax =  -3.01979263643818E+03  1.87366450945307E+00
 cg2d: Sum(rhs),rhsMax =  -2.95922545412518E+03  1.91201325364194E+00
 cg2d: Sum(rhs),rhsMax =  -2.97076792413817E+03  1.90458441496852E+00
 cg2d: Sum(rhs),rhsMax =  -3.05773955256347E+03  1.85041210722426E+00
 cg2d: Sum(rhs),rhsMax =  -3.23017175787278E+03  1.75163387984299E+00
 cg2d: Sum(rhs),rhsMax =  -3.35830301067792E+03  1.68480279200886E+00
 cg2d: Sum(rhs),rhsMax =  -3.53181463749232E+03  1.60203149642624E+00
 cg2d: Sum(rhs),rhsMax =  -3.78955204112862E+03  1.49307311982891E+00
 cg2d: Sum(rhs),rhsMax =  -3.91797780857199E+03  1.44413229611021E+00
 cg2d: Sum(rhs),rhsMax =  -3.99419257538662E+03  1.41657623712704E+00
 cg2d: Sum(rhs),rhsMax =  -3.53992442132318E+03  1.59836132509490E+00
 cg2d: Sum(rhs),rhsMax =  -3.18254133929363E+03  1.77784911037723E+00
 cg2d: Sum(rhs),rhsMax =  -2.95171393852739E+03  1.91687894106187E+00
 cg2d: Sum(rhs),rhsMax =  -2.81545282568002E+03  2.00965124941681E+00
 cg2d: Sum(rhs),rhsMax =  -2.75690002895251E+03  2.05233350117223E+00
 cg2d: Sum(rhs),rhsMax =  -2.75163901579978E+03  2.05625747284201E+00
 cg2d: Sum(rhs),rhsMax =  -2.76132791780219E+03  2.04904251042568E+00
 cg2d: Sum(rhs),rhsMax =  -2.84590371245950E+03  1.98814818085046E+00
 cg2d: Sum(rhs),rhsMax =  -3.01875603265450E+03  1.87430790285712E+00
 cg2d: Sum(rhs),rhsMax =  -3.18102517279563E+03  1.77869648350797E+00
 cg2d: Sum(rhs),rhsMax =  -3.30141686961820E+03  1.71383333648994E+00
 cg2d: Sum(rhs),rhsMax =  -3.22978852663674E+03  1.75184172032892E+00
 cg2d: Sum(rhs),rhsMax =  -3.23732928137108E+03  1.74776113179491E+00
 cg2d: Sum(rhs),rhsMax =  -3.32387148425570E+03  1.70225543183686E+00
 cg2d: Sum(rhs),rhsMax =  -3.11378886801575E+03  1.81710402619800E+00
 cg2d: Sum(rhs),rhsMax =  -2.80601119365127E+03  2.01641329927820E+00
 cg2d: Sum(rhs),rhsMax =  -2.61146814167550E+03  2.16662734593873E+00
 cg2d: Sum(rhs),rhsMax =  -2.50252878126107E+03  2.26094434204697E+00
 cg2d: Sum(rhs),rhsMax =  -2.46588945594145E+03  2.29453849813464E+00
 cg2d: Sum(rhs),rhsMax =  -2.49886782572584E+03  2.26425672880815E+00
 cg2d: Sum(rhs),rhsMax =  -2.60840158000387E+03  2.16917453668830E+00
 cg2d: Sum(rhs),rhsMax =  -2.47554650808040E+03  2.28558755423639E+00
 cg2d: Sum(rhs),rhsMax =  -2.27401910959857E+03  2.48814016774061E+00
 cg2d: Sum(rhs),rhsMax =  -2.12069435183225E+03  2.66803100782224E+00
 cg2d: Sum(rhs),rhsMax =  -2.00801516246247E+03  2.81774679523003E+00
 cg2d: Sum(rhs),rhsMax =  -1.92431913529226E+03  2.94030142143890E+00
 cg2d: Sum(rhs),rhsMax =  -1.86218347020218E+03  3.03841075776901E+00
 cg2d: Sum(rhs),rhsMax =  -1.82356341757548E+03  3.10275926478314E+00
 cg2d: Sum(rhs),rhsMax =  -1.80307709990174E+03  3.13801239509407E+00
 cg2d: Sum(rhs),rhsMax =  -1.79880980230701E+03  3.14545666892927E+00
 cg2d: Sum(rhs),rhsMax =  -1.81050879673579E+03  3.12513161990874E+00
 cg2d: Sum(rhs),rhsMax =  -1.83941695137396E+03  3.07601725893393E+00
 cg2d: Sum(rhs),rhsMax =  -1.88604775680392E+03  2.99996554614824E+00
 cg2d: Sum(rhs),rhsMax =  -1.95221179443878E+03  2.89829121252107E+00
 cg2d: Sum(rhs),rhsMax =  -2.04350162947936E+03  2.76881515883278E+00
 cg2d: Sum(rhs),rhsMax =  -2.16578542868622E+03  2.61248331153200E+00
 cg2d: Sum(rhs),rhsMax =  -2.32939479431547E+03  2.42899069861820E+00
 cg2d: Sum(rhs),rhsMax =  -2.32937270267154E+03  2.42901373503378E+00
 cg2d: Sum(rhs),rhsMax =  -2.28559695075631E+03  2.47553633064205E+00
 cg2d: Sum(rhs),rhsMax =  -2.28388971231101E+03  2.47738682752621E+00
 cg2d: Sum(rhs),rhsMax =  -2.32313179862277E+03  2.43553908226655E+00
 cg2d: Sum(rhs),rhsMax =  -2.40435108959052E+03  2.35326625686997E+00
 cg2d: Sum(rhs),rhsMax =  -2.51259067103759E+03  2.25189019207230E+00
 cg2d: Sum(rhs),rhsMax =  -2.43043037397964E+03  2.32801496779242E+00
 cg2d: Sum(rhs),rhsMax =  -2.41931926136893E+03  2.33870675075781E+00
 cg2d: Sum(rhs),rhsMax =  -2.47974756732466E+03  2.28171543077922E+00
 cg2d: Sum(rhs),rhsMax =  -2.62140745438720E+03  2.15841237474645E+00
 cg2d: Sum(rhs),rhsMax =  -2.59206136801676E+03  2.18284889340064E+00
 cg2d: Sum(rhs),rhsMax =  -2.48067591673248E+03  2.28086153884006E+00
 cg2d: Sum(rhs),rhsMax =  -2.38659048159480E+03  2.37077887154776E+00
 cg2d: Sum(rhs),rhsMax =  -2.31028952835867E+03  2.44907758068819E+00
 cg2d: Sum(rhs),rhsMax =  -2.24740957640036E+03  2.51759997297171E+00
 cg2d: Sum(rhs),rhsMax =  -2.18858854927111E+03  2.58526358948844E+00
 cg2d: Sum(rhs),rhsMax =  -2.13229589379509E+03  2.65351460145224E+00
 cg2d: Sum(rhs),rhsMax =  -2.08225596691591E+03  2.71728278304913E+00
 cg2d: Sum(rhs),rhsMax =  -2.03670193278605E+03  2.77805907566558E+00
 cg2d: Sum(rhs),rhsMax =  -1.99390788658035E+03  2.83768288740048E+00
 cg2d: Sum(rhs),rhsMax =  -1.95709812233511E+03  2.89105498811220E+00
 cg2d: Sum(rhs),rhsMax =  -1.92846173505127E+03  2.93398525154117E+00
 cg2d: Sum(rhs),rhsMax =  -1.90747855854338E+03  2.96626049265930E+00
 cg2d: Sum(rhs),rhsMax =  -1.89211951329765E+03  2.99033874395219E+00
 cg2d: Sum(rhs),rhsMax =  -1.88660400888117E+03  2.99908102716127E+00
 cg2d: Sum(rhs),rhsMax =  -1.89110251563878E+03  2.99194688918847E+00
 cg2d: Sum(rhs),rhsMax =  -1.90501408566326E+03  2.97009787559234E+00
 cg2d: Sum(rhs),rhsMax =  -1.93062578547482E+03  2.93069652926570E+00
 cg2d: Sum(rhs),rhsMax =  -1.97078449002028E+03  2.87097768297522E+00
 cg2d: Sum(rhs),rhsMax =  -2.03078530048710E+03  2.78615286778213E+00
 cg2d: Sum(rhs),rhsMax =  -2.11376744169301E+03  2.67677426437703E+00
 cg2d: Sum(rhs),rhsMax =  -2.20600405916262E+03  2.56485397898574E+00
 cg2d: Sum(rhs),rhsMax =  -2.20274281683202E+03  2.56865134030461E+00
 cg2d: Sum(rhs),rhsMax =  -2.21817783660124E+03  2.55077757763165E+00
 cg2d: Sum(rhs),rhsMax =  -2.25408297422247E+03  2.51014641142642E+00
 cg2d: Sum(rhs),rhsMax =  -2.31067100167816E+03  2.44867325754842E+00
 cg2d: Sum(rhs),rhsMax =  -2.35680667910769E+03  2.40073924558977E+00
 cg2d: Sum(rhs),rhsMax =  -2.25958949566911E+03  2.50402929366002E+00
 cg2d: Sum(rhs),rhsMax =  -2.18098307397268E+03  2.59427886274041E+00
 cg2d: Sum(rhs),rhsMax =  -2.11800792770786E+03  2.67141506638512E+00
 cg2d: Sum(rhs),rhsMax =  -2.06963016205783E+03  2.73385960087483E+00
 cg2d: Sum(rhs),rhsMax =  -2.03772133055214E+03  2.77666931388936E+00
 cg2d: Sum(rhs),rhsMax =  -2.02301270280177E+03  2.79685751896949E+00
 cg2d: Sum(rhs),rhsMax =  -2.02223732300533E+03  2.79792990883644E+00
 cg2d: Sum(rhs),rhsMax =  -1.95811392959384E+03  2.88955520069026E+00
 cg2d: Sum(rhs),rhsMax =  -1.86849548354919E+03  3.02814662310795E+00
 cg2d: Sum(rhs),rhsMax =  -1.79463983057149E+03  3.15276535849544E+00
 cg2d: Sum(rhs),rhsMax =  -1.73403802523820E+03  3.26294937391855E+00
 cg2d: Sum(rhs),rhsMax =  -1.68612371823205E+03  3.35567208243449E+00
 cg2d: Sum(rhs),rhsMax =  -1.64856677930328E+03  3.43211955975066E+00
 cg2d: Sum(rhs),rhsMax =  -1.62058624667849E+03  3.49137745701507E+00
 cg2d: Sum(rhs),rhsMax =  -1.60108280139914E+03  3.53390735560802E+00
 cg2d: Sum(rhs),rhsMax =  -1.58931056526592E+03  3.56008348050919E+00
 cg2d: Sum(rhs),rhsMax =  -1.58597507983457E+03  3.56757073975722E+00
 cg2d: Sum(rhs),rhsMax =  -1.59046670523944E+03  3.55749558929000E+00
 cg2d: Sum(rhs),rhsMax =  -1.60275648248410E+03  3.53021706705721E+00
 cg2d: Sum(rhs),rhsMax =  -1.62344098552025E+03  3.48523804638869E+00
 cg2d: Sum(rhs),rhsMax =  -1.65305800399630E+03  3.42279476892125E+00
 cg2d: Sum(rhs),rhsMax =  -1.69267356080269E+03  3.34268722559758E+00
 cg2d: Sum(rhs),rhsMax =  -1.74297060226456E+03  3.24622703415114E+00
 cg2d: Sum(rhs),rhsMax =  -1.80645309650580E+03  3.13214790893064E+00
 cg2d: Sum(rhs),rhsMax =  -1.88538195133791E+03  3.00102495666029E+00
 cg2d: Sum(rhs),rhsMax =  -1.98403683565463E+03  2.85180102865128E+00
 cg2d: Sum(rhs),rhsMax =  -2.10631420136273E+03  2.68624609051266E+00
 cg2d: Sum(rhs),rhsMax =  -2.26037220736984E+03  2.50316220946003E+00
 cg2d: Sum(rhs),rhsMax =  -2.45388202602212E+03  2.30576622217409E+00
 cg2d: Sum(rhs),rhsMax =  -2.48868855735085E+03  2.27351802301241E+00
 cg2d: Sum(rhs),rhsMax =  -2.48281037614554E+03  2.27890069381209E+00
 cg2d: Sum(rhs),rhsMax =  -2.47635551683033E+03  2.28484086810125E+00
 cg2d: Sum(rhs),rhsMax =  -2.46826456556242E+03  2.29233055797350E+00
 cg2d: Sum(rhs),rhsMax =  -2.45743839432147E+03  2.30242935158674E+00
 cg2d: Sum(rhs),rhsMax =  -2.43560577542589E+03  2.32306818529059E+00
 cg2d: Sum(rhs),rhsMax =  -2.40423374453950E+03  2.35338111431659E+00
 cg2d: Sum(rhs),rhsMax =  -2.35193818346862E+03  2.40570875908713E+00
 cg2d: Sum(rhs),rhsMax =  -2.30688523653189E+03  2.45269170706911E+00
 cg2d: Sum(rhs),rhsMax =  -2.26904799047187E+03  2.49359128258247E+00
 cg2d: Sum(rhs),rhsMax =  -2.23916118415292E+03  2.52687404946348E+00
 cg2d: Sum(rhs),rhsMax =  -2.21545592494224E+03  2.55391146585299E+00
 cg2d: Sum(rhs),rhsMax =  -2.19827500253403E+03  2.57387191424169E+00
 cg2d: Sum(rhs),rhsMax =  -2.17814560090104E+03  2.59765843314668E+00
 cg2d: Sum(rhs),rhsMax =  -2.13348057225739E+03  2.65204115864773E+00
 cg2d: Sum(rhs),rhsMax =  -2.09419867220130E+03  2.70178678074248E+00
 cg2d: Sum(rhs),rhsMax =  -2.05926070008660E+03  2.74762602353552E+00
 cg2d: Sum(rhs),rhsMax =  -2.02933048609345E+03  2.78815024343027E+00
 cg2d: Sum(rhs),rhsMax =  -2.00441529549010E+03  2.82280738005368E+00
 cg2d: Sum(rhs),rhsMax =  -1.98534045448958E+03  2.84992847247279E+00
 cg2d: Sum(rhs),rhsMax =  -1.97241593915842E+03  2.86860300430146E+00
 cg2d: Sum(rhs),rhsMax =  -1.96528643036689E+03  2.87900949264971E+00
 cg2d: Sum(rhs),rhsMax =  -1.96400302925577E+03  2.88089081560428E+00
 cg2d: Sum(rhs),rhsMax =  -1.97104131277814E+03  2.87060360030049E+00
 cg2d: Sum(rhs),rhsMax =  -1.98727933195980E+03  2.84714795640837E+00
 cg2d: Sum(rhs),rhsMax =  -2.01382533340211E+03  2.80961719715945E+00
 cg2d: Sum(rhs),rhsMax =  -2.05123217158224E+03  2.75838023954037E+00
 cg2d: Sum(rhs),rhsMax =  -2.10061576211297E+03  2.69353319671874E+00
 cg2d: Sum(rhs),rhsMax =  -2.16467980043923E+03  2.61381765915396E+00
 cg2d: Sum(rhs),rhsMax =  -2.19477155388499E+03  2.57798050953709E+00
 cg2d: Sum(rhs),rhsMax =  -2.21840524730446E+03  2.55051609514400E+00
 cg2d: Sum(rhs),rhsMax =  -2.25058525485570E+03  2.51404752456921E+00
 cg2d: Sum(rhs),rhsMax =  -2.29539906332916E+03  2.46496497240687E+00
 cg2d: Sum(rhs),rhsMax =  -2.35172733794209E+03  2.40592444435038E+00
 cg2d: Sum(rhs),rhsMax =  -2.32726558892362E+03  2.43121297188037E+00
 cg2d: Sum(rhs),rhsMax =  -2.26888985329623E+03  2.49376508100730E+00
 cg2d: Sum(rhs),rhsMax =  -2.21873037189480E+03  2.55014235189376E+00
 cg2d: Sum(rhs),rhsMax =  -2.17798098602814E+03  2.59785476783259E+00
 cg2d: Sum(rhs),rhsMax =  -2.14426756515306E+03  2.63869975032618E+00
 cg2d: Sum(rhs),rhsMax =  -2.11656107495640E+03  2.67324120988027E+00
 cg2d: Sum(rhs),rhsMax =  -2.09766164194541E+03  2.69732647804653E+00
 cg2d: Sum(rhs),rhsMax =  -2.08681038663124E+03  2.71135237060797E+00
 cg2d: Sum(rhs),rhsMax =  -2.08314402996050E+03  2.71612438094797E+00
 cg2d: Sum(rhs),rhsMax =  -2.08501244339383E+03  2.71369041788169E+00
 cg2d: Sum(rhs),rhsMax =  -2.09318862524612E+03  2.70309050056903E+00
 cg2d: Sum(rhs),rhsMax =  -2.10878100172207E+03  2.68310378563798E+00
 cg2d: Sum(rhs),rhsMax =  -2.13185249601689E+03  2.65406649820912E+00
 cg2d: Sum(rhs),rhsMax =  -2.16226444723814E+03  2.61673741897250E+00
 cg2d: Sum(rhs),rhsMax =  -2.20213009164274E+03  2.56936604711719E+00
 cg2d: Sum(rhs),rhsMax =  -2.16307534698996E+03  2.61575644911096E+00
 cg2d: Sum(rhs),rhsMax =  -2.12507405927631E+03  2.66253228404133E+00
 cg2d: Sum(rhs),rhsMax =  -2.09826571424342E+03  2.69654994140820E+00
 cg2d: Sum(rhs),rhsMax =  -2.08257140344880E+03  2.71687121000125E+00
 cg2d: Sum(rhs),rhsMax =  -2.07611163914536E+03  2.72532468009817E+00
 cg2d: Sum(rhs),rhsMax =  -2.05551028097686E+03  2.75263925516004E+00
 cg2d: Sum(rhs),rhsMax =  -2.04216318778821E+03  2.77062985105024E+00
 cg2d: Sum(rhs),rhsMax =  -2.03443875094725E+03  2.78114948713372E+00
 cg2d: Sum(rhs),rhsMax =  -2.03316678130734E+03  2.78288940229672E+00
 cg2d: Sum(rhs),rhsMax =  -2.04004658328594E+03  2.77350445580921E+00
 cg2d: Sum(rhs),rhsMax =  -2.05342264809326E+03  2.75543775367230E+00
 cg2d: Sum(rhs),rhsMax =  -2.07534393096438E+03  2.72633282820390E+00
 cg2d: Sum(rhs),rhsMax =  -2.10717888742980E+03  2.68514378278690E+00
 cg2d: Sum(rhs),rhsMax =  -2.14856423968733E+03  2.63342290832567E+00
 cg2d: Sum(rhs),rhsMax =  -2.17216123351366E+03  2.60481505769693E+00
 cg2d: Sum(rhs),rhsMax =  -2.15989409350478E+03  2.61960913075176E+00
 cg2d: Sum(rhs),rhsMax =  -2.15351958237491E+03  2.62736328710890E+00
 cg2d: Sum(rhs),rhsMax =  -2.15450444180966E+03  2.62616227611462E+00
 cg2d: Sum(rhs),rhsMax =  -2.16279752433671E+03  2.61609245670704E+00
 cg2d: Sum(rhs),rhsMax =  -2.17840513848645E+03  2.59734894526238E+00
 cg2d: Sum(rhs),rhsMax =  -2.20381475205769E+03  2.56740194860707E+00
 cg2d: Sum(rhs),rhsMax =  -2.23844805450763E+03  2.52767906648899E+00
 cg2d: Sum(rhs),rhsMax =  -2.28338390260138E+03  2.47793561229712E+00
 cg2d: Sum(rhs),rhsMax =  -2.34115545860113E+03  2.41678879888767E+00
 cg2d: Sum(rhs),rhsMax =  -2.41192806514863E+03  2.34587356503655E+00
 cg2d: Sum(rhs),rhsMax =  -2.34187483716575E+03  2.41604640820583E+00
 cg2d: Sum(rhs),rhsMax =  -2.32636965025222E+03  2.43214928813591E+00
 cg2d: Sum(rhs),rhsMax =  -2.37400224002384E+03  2.38335002107879E+00
 cg2d: Sum(rhs),rhsMax =  -2.49131187718743E+03  2.27112403734438E+00
 cg2d: Sum(rhs),rhsMax =  -2.44311765240254E+03  2.31592542554708E+00
 cg2d: Sum(rhs),rhsMax =  -2.35094613256983E+03  2.40672391868760E+00
 cg2d: Sum(rhs),rhsMax =  -2.27118360452567E+03  2.49124653661966E+00
 cg2d: Sum(rhs),rhsMax =  -2.20455094251769E+03  2.56654458723469E+00
 cg2d: Sum(rhs),rhsMax =  -2.14900468727084E+03  2.63288317718259E+00
 cg2d: Sum(rhs),rhsMax =  -2.10311060323476E+03  2.69033795944889E+00
 cg2d: Sum(rhs),rhsMax =  -2.06640114844888E+03  2.73813160288315E+00
 cg2d: Sum(rhs),rhsMax =  -2.03829434581929E+03  2.77588872304293E+00
 cg2d: Sum(rhs),rhsMax =  -2.01830782925965E+03  2.80337726821256E+00
 cg2d: Sum(rhs),rhsMax =  -2.00583565191969E+03  2.82080851608497E+00
 cg2d: Sum(rhs),rhsMax =  -2.00072795344417E+03  2.82800981465861E+00
 cg2d: Sum(rhs),rhsMax =  -2.00421692768263E+03  2.82308676802968E+00
 cg2d: Sum(rhs),rhsMax =  -2.01640170175913E+03  2.80602733268165E+00
 cg2d: Sum(rhs),rhsMax =  -2.03736113071595E+03  2.77716022137598E+00
 cg2d: Sum(rhs),rhsMax =  -2.06768290031401E+03  2.73643424141229E+00
 cg2d: Sum(rhs),rhsMax =  -2.10689713280909E+03  2.68550286613097E+00
 cg2d: Sum(rhs),rhsMax =  -2.15789772492524E+03  2.62203264939165E+00
 cg2d: Sum(rhs),rhsMax =  -2.22161074933369E+03  2.54683602449210E+00
 cg2d: Sum(rhs),rhsMax =  -2.29924541398196E+03  2.46084139361312E+00
 cg2d: Sum(rhs),rhsMax =  -2.39255436878686E+03  2.36486926383656E+00
 cg2d: Sum(rhs),rhsMax =  -2.50344677092764E+03  2.26011527567065E+00
 cg2d: Sum(rhs),rhsMax =  -2.59950139462091E+03  2.17660136690446E+00
 cg2d: Sum(rhs),rhsMax =  -2.66910576324388E+03  2.11984042248121E+00
 cg2d: Sum(rhs),rhsMax =  -2.66047232259800E+03  2.12671947035205E+00
 cg2d: Sum(rhs),rhsMax =  -2.60240620856411E+03  2.17417183765628E+00
 cg2d: Sum(rhs),rhsMax =  -2.55271068762947E+03  2.21649806075604E+00
 cg2d: Sum(rhs),rhsMax =  -2.51097411164475E+03  2.25333995383001E+00
 cg2d: Sum(rhs),rhsMax =  -2.47605682306456E+03  2.28511649494338E+00
 cg2d: Sum(rhs),rhsMax =  -2.44915101852820E+03  2.31022025428310E+00
 cg2d: Sum(rhs),rhsMax =  -2.43163152033615E+03  2.32686500462033E+00
 cg2d: Sum(rhs),rhsMax =  -2.42071839976261E+03  2.33735501384911E+00
 cg2d: Sum(rhs),rhsMax =  -2.41494480633739E+03  2.34294310741752E+00
 cg2d: Sum(rhs),rhsMax =  -2.41522770382145E+03  2.34266867668399E+00
 cg2d: Sum(rhs),rhsMax =  -2.42239818339764E+03  2.33573420240348E+00
 cg2d: Sum(rhs),rhsMax =  -2.43616925519432E+03  2.32253086551271E+00
 cg2d: Sum(rhs),rhsMax =  -2.45659478543367E+03  2.30322001917100E+00
 cg2d: Sum(rhs),rhsMax =  -2.48354149007049E+03  2.27822982278477E+00
 cg2d: Sum(rhs),rhsMax =  -2.51812158566954E+03  2.24694403995489E+00
 cg2d: Sum(rhs),rhsMax =  -2.56010948566081E+03  2.21009231069720E+00
 cg2d: Sum(rhs),rhsMax =  -2.61078403203740E+03  2.16719507219694E+00
 cg2d: Sum(rhs),rhsMax =  -2.59781078739693E+03  2.17801785882622E+00
 cg2d: Sum(rhs),rhsMax =  -2.54914944421971E+03  2.21959457952998E+00
 cg2d: Sum(rhs),rhsMax =  -2.50580990540213E+03  2.25798384650169E+00
 cg2d: Sum(rhs),rhsMax =  -2.46865712656898E+03  2.29196603607149E+00
 cg2d: Sum(rhs),rhsMax =  -2.43737836337008E+03  2.32137872963584E+00
 cg2d: Sum(rhs),rhsMax =  -2.41298254567797E+03  2.34484841133080E+00
 cg2d: Sum(rhs),rhsMax =  -2.39499788064970E+03  2.36245649088718E+00
 cg2d: Sum(rhs),rhsMax =  -2.38552233642533E+03  2.37184041516059E+00
 cg2d: Sum(rhs),rhsMax =  -2.38416106903145E+03  2.37319464791885E+00
 cg2d: Sum(rhs),rhsMax =  -2.39222865168919E+03  2.36519125578011E+00
 cg2d: Sum(rhs),rhsMax =  -2.40952408973611E+03  2.34821403649946E+00
 cg2d: Sum(rhs),rhsMax =  -2.43751242612464E+03  2.32125105421416E+00
 cg2d: Sum(rhs),rhsMax =  -2.47575529048261E+03  2.28539480882982E+00
 cg2d: Sum(rhs),rhsMax =  -2.52739284662941E+03  2.23870155221325E+00
 cg2d: Sum(rhs),rhsMax =  -2.59262352162792E+03  2.18237559044022E+00
 cg2d: Sum(rhs),rhsMax =  -2.67301359424653E+03  2.11674130688319E+00
 cg2d: Sum(rhs),rhsMax =  -2.77306104981478E+03  2.04037278197675E+00
 cg2d: Sum(rhs),rhsMax =  -2.89702989155675E+03  1.95306175655699E+00
 cg2d: Sum(rhs),rhsMax =  -3.01659929671330E+03  1.87564795064648E+00
 cg2d: Sum(rhs),rhsMax =  -2.93044780100211E+03  1.93078965162493E+00
 cg2d: Sum(rhs),rhsMax =  -2.85566450900820E+03  1.98135259620082E+00
 cg2d: Sum(rhs),rhsMax =  -2.78967323022931E+03  2.02822259879406E+00
 cg2d: Sum(rhs),rhsMax =  -2.73282286026504E+03  2.07041530977723E+00
 cg2d: Sum(rhs),rhsMax =  -2.68555280581235E+03  2.10685795362360E+00
 cg2d: Sum(rhs),rhsMax =  -2.64608424428669E+03  2.13828350364075E+00
 cg2d: Sum(rhs),rhsMax =  -2.61550270346750E+03  2.16328519993527E+00
 cg2d: Sum(rhs),rhsMax =  -2.59319532096493E+03  2.18189437681715E+00
 cg2d: Sum(rhs),rhsMax =  -2.57870782771361E+03  2.19415252398664E+00
 cg2d: Sum(rhs),rhsMax =  -2.57362802257564E+03  2.19848332360767E+00
 cg2d: Sum(rhs),rhsMax =  -2.57823187051387E+03  2.19455757781561E+00
 cg2d: Sum(rhs),rhsMax =  -2.59117093836702E+03  2.18359900731508E+00
 cg2d: Sum(rhs),rhsMax =  -2.61396833102413E+03  2.16455502603015E+00
 cg2d: Sum(rhs),rhsMax =  -2.64646169645356E+03  2.13797853049758E+00
 cg2d: Sum(rhs),rhsMax =  -2.68948683281409E+03  2.10377616271194E+00
 cg2d: Sum(rhs),rhsMax =  -2.74460282884499E+03  2.06152898675799E+00
 cg2d: Sum(rhs),rhsMax =  -2.77457713611629E+03  2.03925788011135E+00
 cg2d: Sum(rhs),rhsMax =  -2.73698008969779E+03  2.06727053298611E+00
 cg2d: Sum(rhs),rhsMax =  -2.76421074825390E+03  2.04690553800069E+00
 cg2d: Sum(rhs),rhsMax =  -2.76719276481736E+03  2.04469972628574E+00
 cg2d: Sum(rhs),rhsMax =  -2.75513238581838E+03  2.05365024124649E+00
 cg2d: Sum(rhs),rhsMax =  -2.75604152637292E+03  2.05297279981417E+00
 cg2d: Sum(rhs),rhsMax =  -2.76861470707546E+03  2.04364958198848E+00
 cg2d: Sum(rhs),rhsMax =  -2.79269688402063E+03  2.02602664155088E+00
 cg2d: Sum(rhs),rhsMax =  -2.83028874019791E+03  1.99911698352243E+00
 cg2d: Sum(rhs),rhsMax =  -2.88222866777395E+03  1.96309139245772E+00
 cg2d: Sum(rhs),rhsMax =  -2.78206250520609E+03  2.03377108825339E+00
 cg2d: Sum(rhs),rhsMax =  -2.62001813461677E+03  2.15955691834535E+00
 cg2d: Sum(rhs),rhsMax =  -2.49984946865437E+03  2.26336759862888E+00
 cg2d: Sum(rhs),rhsMax =  -2.41577053179178E+03  2.34214227483159E+00
 cg2d: Sum(rhs),rhsMax =  -2.36278727316882E+03  2.39466258899120E+00
 cg2d: Sum(rhs),rhsMax =  -2.33883760523519E+03  2.41918390406287E+00
 cg2d: Sum(rhs),rhsMax =  -2.34343470452127E+03  2.41443820810778E+00
 cg2d: Sum(rhs),rhsMax =  -2.37783721198799E+03  2.37950615806516E+00
 cg2d: Sum(rhs),rhsMax =  -2.44521023507468E+03  2.31394348332143E+00
 cg2d: Sum(rhs),rhsMax =  -2.55060227057558E+03  2.21833029558352E+00
 cg2d: Sum(rhs),rhsMax =  -2.70316381643076E+03  2.09313185327881E+00
 cg2d: Sum(rhs),rhsMax =  -2.91591404346661E+03  1.94041326474606E+00
 cg2d: Sum(rhs),rhsMax =  -2.95954713378303E+03  1.91180543273508E+00
 cg2d: Sum(rhs),rhsMax =  -2.91332557149562E+03  1.94213731007662E+00
 cg2d: Sum(rhs),rhsMax =  -2.84519022357592E+03  1.98864674914097E+00
 cg2d: Sum(rhs),rhsMax =  -2.73392083396219E+03  2.06958380744399E+00
 cg2d: Sum(rhs),rhsMax =  -2.68644341767717E+03  2.10615948639416E+00
 cg2d: Sum(rhs),rhsMax =  -2.69877307113195E+03  2.09653725588300E+00
 cg2d: Sum(rhs),rhsMax =  -2.77176196239971E+03  2.04132907715615E+00
 cg2d: Sum(rhs),rhsMax =  -2.83189197201693E+03  1.99798521437671E+00
 cg2d: Sum(rhs),rhsMax =  -2.78547291363665E+03  2.03128102991132E+00
 cg2d: Sum(rhs),rhsMax =  -2.75463534793669E+03  2.05402079554377E+00
 cg2d: Sum(rhs),rhsMax =  -2.55346321765919E+03  2.21584483758055E+00
 cg2d: Sum(rhs),rhsMax =  -2.39896259660669E+03  2.35855210781744E+00
 cg2d: Sum(rhs),rhsMax =  -2.28100944319194E+03  2.48051506568262E+00
 cg2d: Sum(rhs),rhsMax =  -2.19370211680986E+03  2.57923728360624E+00
 cg2d: Sum(rhs),rhsMax =  -2.13262127500402E+03  2.65310974579454E+00
 cg2d: Sum(rhs),rhsMax =  -2.09434899642628E+03  2.70159285699597E+00
 cg2d: Sum(rhs),rhsMax =  -2.07759667062969E+03  2.72337666342478E+00
 cg2d: Sum(rhs),rhsMax =  -2.08117443769151E+03  2.71869488031864E+00
 cg2d: Sum(rhs),rhsMax =  -2.10559768843769E+03  2.68716019203085E+00
 cg2d: Sum(rhs),rhsMax =  -2.15215627849410E+03  2.62902761539277E+00
 cg2d: Sum(rhs),rhsMax =  -2.22419007571989E+03  2.54388253529574E+00
 cg2d: Sum(rhs),rhsMax =  -2.32621786692099E+03  2.43230798338378E+00
 cg2d: Sum(rhs),rhsMax =  -2.45877435581843E+03  2.30117833928627E+00
 cg2d: Sum(rhs),rhsMax =  -2.50350163975251E+03  2.26006574110384E+00
 cg2d: Sum(rhs),rhsMax =  -2.57751838301086E+03  2.19516505724882E+00
 cg2d: Sum(rhs),rhsMax =  -2.68335663035390E+03  2.10858229755905E+00
 cg2d: Sum(rhs),rhsMax =  -2.76803503512973E+03  2.04407755573684E+00
 cg2d: Sum(rhs),rhsMax =  -2.83026371985623E+03  1.99913465628897E+00
 cg2d: Sum(rhs),rhsMax =  -2.90837290550095E+03  1.94544457421541E+00
 cg2d: Sum(rhs),rhsMax =  -3.00470683907212E+03  1.88307165784905E+00
 cg2d: Sum(rhs),rhsMax =  -3.12324016518389E+03  1.81160525273560E+00
 cg2d: Sum(rhs),rhsMax =  -3.26947162714725E+03  1.73057880111926E+00
 cg2d: Sum(rhs),rhsMax =  -3.34159271513039E+03  1.69322798172941E+00
 cg2d: Sum(rhs),rhsMax =  -3.42574136911769E+03  1.65163615088058E+00
 cg2d: Sum(rhs),rhsMax =  -3.29868983945229E+03  1.71525016421107E+00
 cg2d: Sum(rhs),rhsMax =  -2.95598505051351E+03  1.91410923672263E+00
 cg2d: Sum(rhs),rhsMax =  -2.69761813075813E+03  2.09743485346898E+00
 cg2d: Sum(rhs),rhsMax =  -2.49960622797888E+03  2.26358785054593E+00
 cg2d: Sum(rhs),rhsMax =  -2.34794300252693E+03  2.40980223229973E+00
 cg2d: Sum(rhs),rhsMax =  -2.23156871638294E+03  2.53547123477016E+00
 cg2d: Sum(rhs),rhsMax =  -2.14304019111881E+03  2.64021100129160E+00
 cg2d: Sum(rhs),rhsMax =  -2.07850805989681E+03  2.72218251060466E+00
 cg2d: Sum(rhs),rhsMax =  -2.03518884758360E+03  2.78012445651902E+00
 cg2d: Sum(rhs),rhsMax =  -2.01093559782764E+03  2.81365464658052E+00
 cg2d: Sum(rhs),rhsMax =  -2.00477020966904E+03  2.82230764479287E+00
 cg2d: Sum(rhs),rhsMax =  -2.01667354808480E+03  2.80564908196238E+00
 cg2d: Sum(rhs),rhsMax =  -2.04723774075518E+03  2.76376220316982E+00
 cg2d: Sum(rhs),rhsMax =  -2.09781781947538E+03  2.69712566852774E+00
 cg2d: Sum(rhs),rhsMax =  -2.17051215030058E+03  2.60679410986867E+00
 cg2d: Sum(rhs),rhsMax =  -2.26859570202336E+03  2.49408842825342E+00
 cg2d: Sum(rhs),rhsMax =  -2.39682455612372E+03  2.36065600811120E+00
 cg2d: Sum(rhs),rhsMax =  -2.56277848425830E+03  2.20779061614427E+00
 cg2d: Sum(rhs),rhsMax =  -2.77673487367356E+03  2.03767321916349E+00
 cg2d: Sum(rhs),rhsMax =  -3.05350623186426E+03  1.85297748200353E+00
 cg2d: Sum(rhs),rhsMax =  -3.41714720953357E+03  1.65579003240373E+00
 cg2d: Sum(rhs),rhsMax =  -3.50680954994416E+03  1.61345468244548E+00
 cg2d: Sum(rhs),rhsMax =  -3.44883182675231E+03  1.64057819372713E+00
 cg2d: Sum(rhs),rhsMax =  -3.36388354215989E+03  1.68200777996285E+00
 cg2d: Sum(rhs),rhsMax =  -3.30780935953184E+03  1.71052127671672E+00
 cg2d: Sum(rhs),rhsMax =  -3.28066356814270E+03  1.72467495409935E+00
 cg2d: Sum(rhs),rhsMax =  -3.28234022293562E+03  1.72379397152850E+00
 cg2d: Sum(rhs),rhsMax =  -3.31303838293368E+03  1.70782153262943E+00
 cg2d: Sum(rhs),rhsMax =  -3.37519920549790E+03  1.67636869539001E+00
 cg2d: Sum(rhs),rhsMax =  -3.47160086477465E+03  1.62981820468270E+00
 cg2d: Sum(rhs),rhsMax =  -3.60675952710310E+03  1.56874286912785E+00
 cg2d: Sum(rhs),rhsMax =  -3.54998108127309E+03  1.59383336397185E+00
 cg2d: Sum(rhs),rhsMax =  -3.34245786900272E+03  1.69278971061201E+00
 cg2d: Sum(rhs),rhsMax =  -3.17616029412292E+03  1.78142088712320E+00
 cg2d: Sum(rhs),rhsMax =  -3.05145704910699E+03  1.85422183492891E+00
 cg2d: Sum(rhs),rhsMax =  -2.96218416031599E+03  1.91010348532765E+00
 cg2d: Sum(rhs),rhsMax =  -2.90332318342945E+03  1.94882826724048E+00
 cg2d: Sum(rhs),rhsMax =  -2.87274106161873E+03  1.96957476063426E+00
 cg2d: Sum(rhs),rhsMax =  -2.86885609793434E+03  1.97224193045999E+00
 cg2d: Sum(rhs),rhsMax =  -2.89232829312921E+03  1.95623653865393E+00
 cg2d: Sum(rhs),rhsMax =  -2.93995610991524E+03  1.92454515552787E+00
 cg2d: Sum(rhs),rhsMax =  -3.01578102228144E+03  1.87615687180151E+00
 cg2d: Sum(rhs),rhsMax =  -3.12333611940581E+03  1.81154959712704E+00
 cg2d: Sum(rhs),rhsMax =  -3.25912594906753E+03  1.73607230196819E+00
 cg2d: Sum(rhs),rhsMax =  -3.27418021432086E+03  1.72809006176697E+00
 cg2d: Sum(rhs),rhsMax =  -3.30920078414482E+03  1.70980205127206E+00
 cg2d: Sum(rhs),rhsMax =  -3.36285120382869E+03  1.68252412784725E+00
 cg2d: Sum(rhs),rhsMax =  -3.43451693635899E+03  1.64741603947371E+00
 cg2d: Sum(rhs),rhsMax =  -3.38488428603865E+03  1.67157214565335E+00
 cg2d: Sum(rhs),rhsMax =  -3.17215328661089E+03  1.78367114624747E+00
 cg2d: Sum(rhs),rhsMax =  -3.01377637314491E+03  1.87740481982001E+00
 cg2d: Sum(rhs),rhsMax =  -2.90215180961652E+03  1.94961485820743E+00
 cg2d: Sum(rhs),rhsMax =  -2.83245715704477E+03  1.99758653885705E+00
 cg2d: Sum(rhs),rhsMax =  -2.80228730927798E+03  2.01909285677768E+00
 cg2d: Sum(rhs),rhsMax =  -2.80998127053873E+03  2.01356441344435E+00
 cg2d: Sum(rhs),rhsMax =  -2.85630962570691E+03  1.98090509441938E+00
 cg2d: Sum(rhs),rhsMax =  -2.94448709246787E+03  1.92158366164197E+00
 cg2d: Sum(rhs),rhsMax =  -3.07829259424906E+03  1.83805733716557E+00
 cg2d: Sum(rhs),rhsMax =  -3.10790124125301E+03  1.82054635897013E+00
 cg2d: Sum(rhs),rhsMax =  -3.02160612488393E+03  1.87253998534282E+00
 cg2d: Sum(rhs),rhsMax =  -2.96331790067694E+03  1.90937269589247E+00
 cg2d: Sum(rhs),rhsMax =  -2.93087279867806E+03  1.93050967321200E+00
 cg2d: Sum(rhs),rhsMax =  -2.92109223311976E+03  1.93697351444430E+00
 cg2d: Sum(rhs),rhsMax =  -2.93296151790785E+03  1.92913485371536E+00
 cg2d: Sum(rhs),rhsMax =  -2.96829208488308E+03  1.90617302037673E+00
 cg2d: Sum(rhs),rhsMax =  -3.02634720094698E+03  1.86960646386886E+00
 cg2d: Sum(rhs),rhsMax =  -3.10771341647537E+03  1.82065638961622E+00
 cg2d: Sum(rhs),rhsMax =  -3.21601904674238E+03  1.75934228204687E+00
 cg2d: Sum(rhs),rhsMax =  -3.35421262619926E+03  1.68685736992566E+00
 cg2d: Sum(rhs),rhsMax =  -3.52736946446910E+03  1.60405036835389E+00
 cg2d: Sum(rhs),rhsMax =  -3.67154115295256E+03  1.54106356243667E+00
 cg2d: Sum(rhs),rhsMax =  -3.67913831146756E+03  1.53788137596409E+00
 cg2d: Sum(rhs),rhsMax =  -3.51503793895191E+03  1.60967772953512E+00
 cg2d: Sum(rhs),rhsMax =  -3.40640562729808E+03  1.66101131452447E+00
 cg2d: Sum(rhs),rhsMax =  -3.34655527565031E+03  1.69071711738048E+00
 cg2d: Sum(rhs),rhsMax =  -3.33354496912038E+03  1.69731572281592E+00
 cg2d: Sum(rhs),rhsMax =  -3.36550655360544E+03  1.68119663375502E+00
 cg2d: Sum(rhs),rhsMax =  -3.44407516289804E+03  1.64284402087233E+00
 cg2d: Sum(rhs),rhsMax =  -3.57290367916923E+03  1.58360784305205E+00
 cg2d: Sum(rhs),rhsMax =  -3.75802832175051E+03  1.50559756456714E+00
 cg2d: Sum(rhs),rhsMax =  -3.99233120027372E+03  1.41723669830148E+00
 cg2d: Sum(rhs),rhsMax =  -4.17006695428487E+03  1.35683152113135E+00
 cg2d: Sum(rhs),rhsMax =  -4.16873995836338E+03  1.35726342859324E+00
 cg2d: Sum(rhs),rhsMax =  -4.12073590970782E+03  1.37307471596818E+00
 cg2d: Sum(rhs),rhsMax =  -4.06788877738117E+03  1.39091273101240E+00
 cg2d: Sum(rhs),rhsMax =  -3.99013695754937E+03  1.41801606035021E+00
 cg2d: Sum(rhs),rhsMax =  -3.76764347220253E+03  1.50175522990615E+00
 cg2d: Sum(rhs),rhsMax =  -3.60219751631419E+03  1.57072960690710E+00
 cg2d: Sum(rhs),rhsMax =  -3.48875971411612E+03  1.62180223129394E+00
 cg2d: Sum(rhs),rhsMax =  -3.42231040594770E+03  1.65329196292909E+00
 cg2d: Sum(rhs),rhsMax =  -3.40031649595180E+03  1.66398577765866E+00
 cg2d: Sum(rhs),rhsMax =  -3.42328808789981E+03  1.65281978715182E+00
 cg2d: Sum(rhs),rhsMax =  -3.49514160335932E+03  1.61884093147005E+00
 cg2d: Sum(rhs),rhsMax =  -3.51797476498672E+03  1.60833396109460E+00
 cg2d: Sum(rhs),rhsMax =  -3.49849758360645E+03  1.61728803681758E+00
 cg2d: Sum(rhs),rhsMax =  -3.49989249404302E+03  1.61664345360100E+00
 cg2d: Sum(rhs),rhsMax =  -3.52254845986563E+03  1.60624569207992E+00
 cg2d: Sum(rhs),rhsMax =  -3.56660970899135E+03  1.58640242427929E+00
 cg2d: Sum(rhs),rhsMax =  -3.63455872817349E+03  1.55674421902802E+00
 cg2d: Sum(rhs),rhsMax =  -3.73045700279049E+03  1.51672523891028E+00
 cg2d: Sum(rhs),rhsMax =  -3.85463888617004E+03  1.46786208926143E+00
 cg2d: Sum(rhs),rhsMax =  -4.01133410996391E+03  1.41052281702180E+00
 cg2d: Sum(rhs),rhsMax =  -4.07591017119359E+03  1.38817541387204E+00
 cg2d: Sum(rhs),rhsMax =  -4.00445148806588E+03  1.41294714286444E+00
 cg2d: Sum(rhs),rhsMax =  -3.94729932980290E+03  1.43340492221664E+00
 cg2d: Sum(rhs),rhsMax =  -3.91726398907439E+03  1.44439545166801E+00
 cg2d: Sum(rhs),rhsMax =  -3.91439866353385E+03  1.44545274386894E+00
 cg2d: Sum(rhs),rhsMax =  -3.93918485634582E+03  1.43635764635088E+00
 cg2d: Sum(rhs),rhsMax =  -3.99339947930794E+03  1.41685757163029E+00
 cg2d: Sum(rhs),rhsMax =  -4.08124769901749E+03  1.38635993354778E+00
 cg2d: Sum(rhs),rhsMax =  -4.15387210247477E+03  1.36212144938959E+00
 cg2d: Sum(rhs),rhsMax =  -4.09256080749658E+03  1.38252760433949E+00
 cg2d: Sum(rhs),rhsMax =  -4.06140480786437E+03  1.39313330152311E+00
 cg2d: Sum(rhs),rhsMax =  -3.93373440697099E+03  1.43834781493515E+00
 cg2d: Sum(rhs),rhsMax =  -3.69470264902915E+03  1.53140288306792E+00
 cg2d: Sum(rhs),rhsMax =  -3.51269223563281E+03  1.61075263907446E+00
 cg2d: Sum(rhs),rhsMax =  -3.37510090139642E+03  1.67641752175793E+00
 cg2d: Sum(rhs),rhsMax =  -3.27397486677968E+03  1.72819844960120E+00
 cg2d: Sum(rhs),rhsMax =  -3.20368042305204E+03  1.76611819583792E+00
 cg2d: Sum(rhs),rhsMax =  -3.16080751230990E+03  1.79007366527898E+00
 cg2d: Sum(rhs),rhsMax =  -3.14290256562972E+03  1.80027161855979E+00
 cg2d: Sum(rhs),rhsMax =  -3.14884503499508E+03  1.79687416367594E+00
 cg2d: Sum(rhs),rhsMax =  -3.17908046439020E+03  1.77978454845031E+00
 cg2d: Sum(rhs),rhsMax =  -3.23431267058992E+03  1.74939125096088E+00
 cg2d: Sum(rhs),rhsMax =  -3.31638160943271E+03  1.70609988690951E+00
 cg2d: Sum(rhs),rhsMax =  -3.42856858086597E+03  1.65027420491990E+00
 cg2d: Sum(rhs),rhsMax =  -3.57457478222114E+03  1.58286751110748E+00
 cg2d: Sum(rhs),rhsMax =  -3.61207347461143E+03  1.56643499324459E+00
 cg2d: Sum(rhs),rhsMax =  -3.50466746753890E+03  1.61444083959704E+00
 cg2d: Sum(rhs),rhsMax =  -3.40988775992663E+03  1.65931511156944E+00
 cg2d: Sum(rhs),rhsMax =  -3.32807845937600E+03  1.70010363573664E+00
 cg2d: Sum(rhs),rhsMax =  -3.25750937642572E+03  1.73693384576232E+00
 cg2d: Sum(rhs),rhsMax =  -3.19769030737748E+03  1.76942660011447E+00
 cg2d: Sum(rhs),rhsMax =  -3.14857977695959E+03  1.79702554472532E+00
 cg2d: Sum(rhs),rhsMax =  -3.11001371952215E+03  1.81930975200691E+00
 cg2d: Sum(rhs),rhsMax =  -3.08187211185368E+03  1.83592247940448E+00
 cg2d: Sum(rhs),rhsMax =  -3.06380036772924E+03  1.84675161880585E+00
 cg2d: Sum(rhs),rhsMax =  -3.05534708539976E+03  1.85186105887595E+00
 cg2d: Sum(rhs),rhsMax =  -3.05825989625128E+03  1.85009727124154E+00
 cg2d: Sum(rhs),rhsMax =  -3.07249165763738E+03  1.84152763270731E+00
 cg2d: Sum(rhs),rhsMax =  -3.09891422919032E+03  1.82582603787659E+00
 cg2d: Sum(rhs),rhsMax =  -3.13794946500227E+03  1.80311325975985E+00
 cg2d: Sum(rhs),rhsMax =  -3.19026868401997E+03  1.77354287340850E+00
 cg2d: Sum(rhs),rhsMax =  -3.25779234221599E+03  1.73678297891548E+00
 cg2d: Sum(rhs),rhsMax =  -3.34199117932921E+03  1.69302609887127E+00
 cg2d: Sum(rhs),rhsMax =  -3.44530137978453E+03  1.64225931641306E+00
 cg2d: Sum(rhs),rhsMax =  -3.57177472284101E+03  1.58410838528513E+00
 cg2d: Sum(rhs),rhsMax =  -3.72406985446783E+03  1.51932657278537E+00
 cg2d: Sum(rhs),rhsMax =  -3.90429807379727E+03  1.44919219328430E+00
 cg2d: Sum(rhs),rhsMax =  -3.77750312697958E+03  1.49783550101943E+00
 cg2d: Sum(rhs),rhsMax =  -3.68729150681230E+03  1.53448087257234E+00
 cg2d: Sum(rhs),rhsMax =  -3.62997467728090E+03  1.55871012660623E+00
 cg2d: Sum(rhs),rhsMax =  -3.60189149152939E+03  1.57086305961967E+00
 cg2d: Sum(rhs),rhsMax =  -3.60113676945958E+03  1.57119227927881E+00
 cg2d: Sum(rhs),rhsMax =  -3.62781306113430E+03  1.55963887704644E+00
 cg2d: Sum(rhs),rhsMax =  -3.68106968316700E+03  1.53707448535286E+00
 cg2d: Sum(rhs),rhsMax =  -3.76262035938727E+03  1.50376007897946E+00
 cg2d: Sum(rhs),rhsMax =  -3.87637107984787E+03  1.45963277824887E+00
 cg2d: Sum(rhs),rhsMax =  -4.02714559342731E+03  1.40498478575904E+00
 cg2d: Sum(rhs),rhsMax =  -4.22177262277293E+03  1.34021388510630E+00
 cg2d: Sum(rhs),rhsMax =  -4.32995059329715E+03  1.30673045035681E+00
 cg2d: Sum(rhs),rhsMax =  -4.29848840083951E+03  1.31629488349832E+00
 cg2d: Sum(rhs),rhsMax =  -4.16581228432885E+03  1.35821729416056E+00
 cg2d: Sum(rhs),rhsMax =  -3.94038686826651E+03  1.43591948657850E+00
 cg2d: Sum(rhs),rhsMax =  -3.81087109977446E+03  1.48472045909314E+00
 cg2d: Sum(rhs),rhsMax =  -3.76271315525845E+03  1.50372299331260E+00
 cg2d: Sum(rhs),rhsMax =  -3.78710674293153E+03  1.49403718270220E+00
 cg2d: Sum(rhs),rhsMax =  -3.88308437267201E+03  1.45710928369772E+00
 cg2d: Sum(rhs),rhsMax =  -4.05649767055003E+03  1.39481857215876E+00
 cg2d: Sum(rhs),rhsMax =  -4.31861973288553E+03  1.31015894863737E+00
 cg2d: Sum(rhs),rhsMax =  -4.30744141361055E+03  1.31355896586862E+00
 cg2d: Sum(rhs),rhsMax =  -4.11053163785302E+03  1.37648333288519E+00
 cg2d: Sum(rhs),rhsMax =  -3.98002200097560E+03  1.42161985220559E+00
 cg2d: Sum(rhs),rhsMax =  -3.91111888767618E+03  1.44666486785415E+00
 cg2d: Sum(rhs),rhsMax =  -3.89765847523727E+03  1.45166086889064E+00
 cg2d: Sum(rhs),rhsMax =  -3.93078008735761E+03  1.43942885713697E+00
 cg2d: Sum(rhs),rhsMax =  -3.87973584565429E+03  1.45836688730743E+00
 cg2d: Sum(rhs),rhsMax =  -3.87850156329785E+03  1.45883099348062E+00
 cg2d: Sum(rhs),rhsMax =  -3.92696027252150E+03  1.44082901179157E+00
 cg2d: Sum(rhs),rhsMax =  -4.02705170579818E+03  1.40501754190426E+00
 cg2d: Sum(rhs),rhsMax =  -4.03529777609195E+03  1.40214640969609E+00
 cg2d: Sum(rhs),rhsMax =  -4.10054570127752E+03  1.37983544166796E+00
 cg2d: Sum(rhs),rhsMax =  -4.01874196935086E+03  1.40792276089223E+00
 cg2d: Sum(rhs),rhsMax =  -3.94533534375760E+03  1.43411847050068E+00
 cg2d: Sum(rhs),rhsMax =  -3.90174880130816E+03  1.45013904711264E+00
 cg2d: Sum(rhs),rhsMax =  -3.88785952365027E+03  1.45531963137640E+00
 cg2d: Sum(rhs),rhsMax =  -3.73215378924834E+03  1.51603567492364E+00
 cg2d: Sum(rhs),rhsMax =  -3.62569881270569E+03  1.56054834697633E+00
 cg2d: Sum(rhs),rhsMax =  -3.59829838079554E+03  1.57243165797468E+00
 cg2d: Sum(rhs),rhsMax =  -3.64758177682698E+03  1.55118613782632E+00
 cg2d: Sum(rhs),rhsMax =  -3.77883324182140E+03  1.49730827658188E+00
 cg2d: Sum(rhs),rhsMax =  -4.00714118508772E+03  1.41199873612091E+00
 cg2d: Sum(rhs),rhsMax =  -4.35575109504910E+03  1.29899026949292E+00
 cg2d: Sum(rhs),rhsMax =  -4.86823104173596E+03  1.16224522630387E+00
 cg2d: Sum(rhs),rhsMax =  -4.97296743085707E+03  1.13776701083819E+00
 cg2d: Sum(rhs),rhsMax =  -4.61246502234683E+03  1.22669294214465E+00
 cg2d: Sum(rhs),rhsMax =  -4.37825166032475E+03  1.29231454191517E+00
 cg2d: Sum(rhs),rhsMax =  -4.25145198379580E+03  1.33085785994230E+00
 cg2d: Sum(rhs),rhsMax =  -4.21541029677567E+03  1.34223667222375E+00
 cg2d: Sum(rhs),rhsMax =  -4.27016080609970E+03  1.32502698275898E+00
 cg2d: Sum(rhs),rhsMax =  -4.42067134154119E+03  1.27991380757777E+00
 cg2d: Sum(rhs),rhsMax =  -4.68742849923087E+03  1.20707511372820E+00
 cg2d: Sum(rhs),rhsMax =  -4.66311665835393E+03  1.21336837641956E+00
 cg2d: Sum(rhs),rhsMax =  -4.56653440900727E+03  1.23903112996184E+00
 cg2d: Sum(rhs),rhsMax =  -4.50708562773979E+03  1.25537403904157E+00
